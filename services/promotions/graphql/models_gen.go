// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"unified-commerce/services/promotions/models"
)

type ApplyDiscountInput struct {
	PromotionID    *string `json:"promotionId,omitempty"`
	DiscountCodeID *string `json:"discountCodeId,omitempty"`
	DiscountCode   *string `json:"discountCode,omitempty"`
	OrderID        string  `json:"orderId"`
	CustomerID     *string `json:"customerId,omitempty"`
	CartTotal      float64 `json:"cartTotal"`
	Metadata       *string `json:"metadata,omitempty"`
}

type CampaignFilter struct {
	MerchantID *string                `json:"merchantId,omitempty"`
	Type       *models.CampaignType   `json:"type,omitempty"`
	Status     *models.CampaignStatus `json:"status,omitempty"`
	Limit      *int                   `json:"limit,omitempty"`
	Offset     *int                   `json:"offset,omitempty"`
}

type CreateCampaignInput struct {
	MerchantID     string                   `json:"merchantId"`
	Name           string                   `json:"name"`
	Description    *string                  `json:"description,omitempty"`
	Type           models.CampaignType      `json:"type"`
	StartsAt       string                   `json:"startsAt"`
	EndsAt         *string                  `json:"endsAt,omitempty"`
	Budget         *float64                 `json:"budget,omitempty"`
	GoalType       *models.CampaignGoalType `json:"goalType,omitempty"`
	GoalValue      *float64                 `json:"goalValue,omitempty"`
	TargetAudience *TargetAudienceInput     `json:"targetAudience,omitempty"`
	Metadata       *string                  `json:"metadata,omitempty"`
}

type CreatePromotionInput struct {
	MerchantID            string                    `json:"merchantId"`
	Name                  string                    `json:"name"`
	Description           *string                   `json:"description,omitempty"`
	Type                  PromotionType             `json:"type"`
	DiscountType          DiscountType              `json:"discountType"`
	DiscountValue         float64                   `json:"discountValue"`
	MinimumRequirements   *MinimumRequirementsInput `json:"minimumRequirements,omitempty"`
	UsageLimits           *UsageLimitsInput         `json:"usageLimits,omitempty"`
	ApplicableProducts    []string                  `json:"applicableProducts,omitempty"`
	ApplicableCollections []string                  `json:"applicableCollections,omitempty"`
	ApplicableCustomers   []string                  `json:"applicableCustomers,omitempty"`
	StartsAt              string                    `json:"startsAt"`
	EndsAt                *string                   `json:"endsAt,omitempty"`
	Priority              *int                      `json:"priority,omitempty"`
	CampaignID            *string                   `json:"campaignId,omitempty"`
	InternalNotes         *string                   `json:"internalNotes,omitempty"`
}

type DiscountCodeValidation struct {
	IsValid          bool                 `json:"isValid"`
	DiscountCode     *models.DiscountCode `json:"discountCode,omitempty"`
	Errors           []string             `json:"errors"`
	ApplicableAmount *float64             `json:"applicableAmount,omitempty"`
}

type GenerateDiscountCodesInput struct {
	PromotionID           string  `json:"promotionId"`
	Count                 int     `json:"count"`
	Prefix                *string `json:"prefix,omitempty"`
	Length                *int    `json:"length,omitempty"`
	UsageLimit            *int    `json:"usageLimit,omitempty"`
	UsageLimitPerCustomer *int    `json:"usageLimitPerCustomer,omitempty"`
	StartsAt              *string `json:"startsAt,omitempty"`
	EndsAt                *string `json:"endsAt,omitempty"`
}

type MinimumRequirementsInput struct {
	Type  models.MinimumRequirementType `json:"type"`
	Value float64                       `json:"value"`
}

type Mutation struct {
}

type Order struct {
	ID string `json:"id"`
}

func (Order) IsEntity() {}

type Product struct {
	ID string `json:"id"`
}

func (Product) IsEntity() {}

type PromotionFilter struct {
	MerchantID *string          `json:"merchantId,omitempty"`
	Type       *PromotionType   `json:"type,omitempty"`
	Status     *PromotionStatus `json:"status,omitempty"`
	CampaignID *string          `json:"campaignId,omitempty"`
	Search     *string          `json:"search,omitempty"`
	Limit      *int             `json:"limit,omitempty"`
	Offset     *int             `json:"offset,omitempty"`
}

type Query struct {
}

type TargetAudienceInput struct {
	CustomerSegments       []string `json:"customerSegments,omitempty"`
	CustomerTags           []string `json:"customerTags,omitempty"`
	NewCustomersOnly       *bool    `json:"newCustomersOnly,omitempty"`
	ReturningCustomersOnly *bool    `json:"returningCustomersOnly,omitempty"`
}

type UpdateCampaignInput struct {
	Name           *string                  `json:"name,omitempty"`
	Description    *string                  `json:"description,omitempty"`
	Type           *models.CampaignType     `json:"type,omitempty"`
	Status         *models.CampaignStatus   `json:"status,omitempty"`
	StartsAt       *string                  `json:"startsAt,omitempty"`
	EndsAt         *string                  `json:"endsAt,omitempty"`
	Budget         *float64                 `json:"budget,omitempty"`
	GoalType       *models.CampaignGoalType `json:"goalType,omitempty"`
	GoalValue      *float64                 `json:"goalValue,omitempty"`
	TargetAudience *TargetAudienceInput     `json:"targetAudience,omitempty"`
	Metadata       *string                  `json:"metadata,omitempty"`
}

type UpdateDiscountCodeInput struct {
	IsActive              *bool   `json:"isActive,omitempty"`
	UsageLimit            *int    `json:"usageLimit,omitempty"`
	UsageLimitPerCustomer *int    `json:"usageLimitPerCustomer,omitempty"`
	StartsAt              *string `json:"startsAt,omitempty"`
	EndsAt                *string `json:"endsAt,omitempty"`
}

type UpdatePromotionInput struct {
	Name                  *string                   `json:"name,omitempty"`
	Description           *string                   `json:"description,omitempty"`
	Type                  *PromotionType            `json:"type,omitempty"`
	DiscountType          *DiscountType             `json:"discountType,omitempty"`
	DiscountValue         *float64                  `json:"discountValue,omitempty"`
	MinimumRequirements   *MinimumRequirementsInput `json:"minimumRequirements,omitempty"`
	UsageLimits           *UsageLimitsInput         `json:"usageLimits,omitempty"`
	ApplicableProducts    []string                  `json:"applicableProducts,omitempty"`
	ApplicableCollections []string                  `json:"applicableCollections,omitempty"`
	ApplicableCustomers   []string                  `json:"applicableCustomers,omitempty"`
	StartsAt              *string                   `json:"startsAt,omitempty"`
	EndsAt                *string                   `json:"endsAt,omitempty"`
	Priority              *int                      `json:"priority,omitempty"`
	Status                *PromotionStatus          `json:"status,omitempty"`
	InternalNotes         *string                   `json:"internalNotes,omitempty"`
}

type UsageLimitsInput struct {
	TotalUsageLimit       *int  `json:"totalUsageLimit,omitempty"`
	OncePerCustomer       *bool `json:"oncePerCustomer,omitempty"`
	PerCustomerUsageLimit *int  `json:"perCustomerUsageLimit,omitempty"`
}

type User struct {
	ID string `json:"id"`
}

func (User) IsEntity() {}

type DiscountType string

const (
	DiscountTypePercentage   DiscountType = "PERCENTAGE"
	DiscountTypeFixedAmount  DiscountType = "FIXED_AMOUNT"
	DiscountTypeFreeShipping DiscountType = "FREE_SHIPPING"
)

var AllDiscountType = []DiscountType{
	DiscountTypePercentage,
	DiscountTypeFixedAmount,
	DiscountTypeFreeShipping,
}

func (e DiscountType) IsValid() bool {
	switch e {
	case DiscountTypePercentage, DiscountTypeFixedAmount, DiscountTypeFreeShipping:
		return true
	}
	return false
}

func (e DiscountType) String() string {
	return string(e)
}

func (e *DiscountType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountType", str)
	}
	return nil
}

func (e DiscountType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *DiscountType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e DiscountType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PromotionStatus string

const (
	PromotionStatusDraft     PromotionStatus = "DRAFT"
	PromotionStatusActive    PromotionStatus = "ACTIVE"
	PromotionStatusInactive  PromotionStatus = "INACTIVE"
	PromotionStatusExpired   PromotionStatus = "EXPIRED"
	PromotionStatusScheduled PromotionStatus = "SCHEDULED"
)

var AllPromotionStatus = []PromotionStatus{
	PromotionStatusDraft,
	PromotionStatusActive,
	PromotionStatusInactive,
	PromotionStatusExpired,
	PromotionStatusScheduled,
}

func (e PromotionStatus) IsValid() bool {
	switch e {
	case PromotionStatusDraft, PromotionStatusActive, PromotionStatusInactive, PromotionStatusExpired, PromotionStatusScheduled:
		return true
	}
	return false
}

func (e PromotionStatus) String() string {
	return string(e)
}

func (e *PromotionStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PromotionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PromotionStatus", str)
	}
	return nil
}

func (e PromotionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PromotionStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PromotionStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PromotionType string

const (
	PromotionTypePercentageDiscount  PromotionType = "PERCENTAGE_DISCOUNT"
	PromotionTypeFixedAmountDiscount PromotionType = "FIXED_AMOUNT_DISCOUNT"
	PromotionTypeFreeShipping        PromotionType = "FREE_SHIPPING"
	PromotionTypeBuyXGetY            PromotionType = "BUY_X_GET_Y"
	PromotionTypeSpendXGetY          PromotionType = "SPEND_X_GET_Y"
)

var AllPromotionType = []PromotionType{
	PromotionTypePercentageDiscount,
	PromotionTypeFixedAmountDiscount,
	PromotionTypeFreeShipping,
	PromotionTypeBuyXGetY,
	PromotionTypeSpendXGetY,
}

func (e PromotionType) IsValid() bool {
	switch e {
	case PromotionTypePercentageDiscount, PromotionTypeFixedAmountDiscount, PromotionTypeFreeShipping, PromotionTypeBuyXGetY, PromotionTypeSpendXGetY:
		return true
	}
	return false
}

func (e PromotionType) String() string {
	return string(e)
}

func (e *PromotionType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PromotionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PromotionType", str)
	}
	return nil
}

func (e PromotionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PromotionType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PromotionType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
