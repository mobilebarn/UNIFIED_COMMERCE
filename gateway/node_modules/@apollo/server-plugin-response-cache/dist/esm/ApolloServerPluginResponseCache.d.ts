import { type ApolloServerPlugin, type BaseContext, type GraphQLRequestContext } from '@apollo/server';
import { type KeyValueCache } from '@apollo/utils.keyvaluecache';
export interface ApolloServerPluginResponseCacheOptions<TContext extends BaseContext> {
    cache?: KeyValueCache;
    sessionId?(requestContext: GraphQLRequestContext<TContext>): Promise<string | null>;
    extraCacheKeyData?(requestContext: GraphQLRequestContext<TContext>): Promise<any>;
    shouldReadFromCache?(requestContext: GraphQLRequestContext<TContext>): Promise<boolean>;
    shouldWriteToCache?(requestContext: GraphQLRequestContext<TContext>): Promise<boolean>;
    generateCacheKey?(requestContext: GraphQLRequestContext<Record<string, any>>, keyData: unknown): string;
}
export default function plugin<TContext extends BaseContext>(options?: ApolloServerPluginResponseCacheOptions<TContext>): ApolloServerPlugin<TContext>;
//# sourceMappingURL=ApolloServerPluginResponseCache.d.ts.map