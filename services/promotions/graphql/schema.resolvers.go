package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"unified-commerce/services/promotions/models"
)

// ID is the resolver for the id field.
func (r *campaignResolver) ID(ctx context.Context, obj *models.Campaign) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// MerchantID is the resolver for the merchantId field.
func (r *campaignResolver) MerchantID(ctx context.Context, obj *models.Campaign) (string, error) {
	panic(fmt.Errorf("not implemented: MerchantID - merchantId"))
}

// StartsAt is the resolver for the startsAt field.
func (r *campaignResolver) StartsAt(ctx context.Context, obj *models.Campaign) (string, error) {
	panic(fmt.Errorf("not implemented: StartsAt - startsAt"))
}

// EndsAt is the resolver for the endsAt field.
func (r *campaignResolver) EndsAt(ctx context.Context, obj *models.Campaign) (*string, error) {
	panic(fmt.Errorf("not implemented: EndsAt - endsAt"))
}

// Metadata is the resolver for the metadata field.
func (r *campaignResolver) Metadata(ctx context.Context, obj *models.Campaign) (*string, error) {
	panic(fmt.Errorf("not implemented: Metadata - metadata"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *campaignResolver) CreatedAt(ctx context.Context, obj *models.Campaign) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *campaignResolver) UpdatedAt(ctx context.Context, obj *models.Campaign) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// ID is the resolver for the id field.
func (r *discountApplicationResolver) ID(ctx context.Context, obj *models.DiscountApplication) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// PromotionID is the resolver for the promotionId field.
func (r *discountApplicationResolver) PromotionID(ctx context.Context, obj *models.DiscountApplication) (string, error) {
	panic(fmt.Errorf("not implemented: PromotionID - promotionId"))
}

// DiscountCodeID is the resolver for the discountCodeId field.
func (r *discountApplicationResolver) DiscountCodeID(ctx context.Context, obj *models.DiscountApplication) (*string, error) {
	panic(fmt.Errorf("not implemented: DiscountCodeID - discountCodeId"))
}

// OrderID is the resolver for the orderId field.
func (r *discountApplicationResolver) OrderID(ctx context.Context, obj *models.DiscountApplication) (string, error) {
	panic(fmt.Errorf("not implemented: OrderID - orderId"))
}

// CustomerID is the resolver for the customerId field.
func (r *discountApplicationResolver) CustomerID(ctx context.Context, obj *models.DiscountApplication) (*string, error) {
	panic(fmt.Errorf("not implemented: CustomerID - customerId"))
}

// AppliedAt is the resolver for the appliedAt field.
func (r *discountApplicationResolver) AppliedAt(ctx context.Context, obj *models.DiscountApplication) (string, error) {
	panic(fmt.Errorf("not implemented: AppliedAt - appliedAt"))
}

// Metadata is the resolver for the metadata field.
func (r *discountApplicationResolver) Metadata(ctx context.Context, obj *models.DiscountApplication) (*string, error) {
	panic(fmt.Errorf("not implemented: Metadata - metadata"))
}

// Order is the resolver for the order field.
func (r *discountApplicationResolver) Order(ctx context.Context, obj *models.DiscountApplication) (*Order, error) {
	panic(fmt.Errorf("not implemented: Order - order"))
}

// Customer is the resolver for the customer field.
func (r *discountApplicationResolver) Customer(ctx context.Context, obj *models.DiscountApplication) (*User, error) {
	panic(fmt.Errorf("not implemented: Customer - customer"))
}

// ID is the resolver for the id field.
func (r *discountCodeResolver) ID(ctx context.Context, obj *models.DiscountCode) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// PromotionID is the resolver for the promotionId field.
func (r *discountCodeResolver) PromotionID(ctx context.Context, obj *models.DiscountCode) (string, error) {
	panic(fmt.Errorf("not implemented: PromotionID - promotionId"))
}

// IsActive is the resolver for the isActive field.
func (r *discountCodeResolver) IsActive(ctx context.Context, obj *models.DiscountCode) (bool, error) {
	panic(fmt.Errorf("not implemented: IsActive - isActive"))
}

// UsageCount is the resolver for the usageCount field.
func (r *discountCodeResolver) UsageCount(ctx context.Context, obj *models.DiscountCode) (int, error) {
	panic(fmt.Errorf("not implemented: UsageCount - usageCount"))
}

// UsageLimitPerCustomer is the resolver for the usageLimitPerCustomer field.
func (r *discountCodeResolver) UsageLimitPerCustomer(ctx context.Context, obj *models.DiscountCode) (*int, error) {
	panic(fmt.Errorf("not implemented: UsageLimitPerCustomer - usageLimitPerCustomer"))
}

// StartsAt is the resolver for the startsAt field.
func (r *discountCodeResolver) StartsAt(ctx context.Context, obj *models.DiscountCode) (*string, error) {
	panic(fmt.Errorf("not implemented: StartsAt - startsAt"))
}

// EndsAt is the resolver for the endsAt field.
func (r *discountCodeResolver) EndsAt(ctx context.Context, obj *models.DiscountCode) (*string, error) {
	panic(fmt.Errorf("not implemented: EndsAt - endsAt"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *discountCodeResolver) CreatedAt(ctx context.Context, obj *models.DiscountCode) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *discountCodeResolver) UpdatedAt(ctx context.Context, obj *models.DiscountCode) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// Applications is the resolver for the applications field.
func (r *discountCodeResolver) Applications(ctx context.Context, obj *models.DiscountCode) ([]*models.DiscountApplication, error) {
	panic(fmt.Errorf("not implemented: Applications - applications"))
}

// CreatePromotion is the resolver for the createPromotion field.
func (r *mutationResolver) CreatePromotion(ctx context.Context, input CreatePromotionInput) (*models.Promotion, error) {
	panic(fmt.Errorf("not implemented: CreatePromotion - createPromotion"))
}

// UpdatePromotion is the resolver for the updatePromotion field.
func (r *mutationResolver) UpdatePromotion(ctx context.Context, id string, input UpdatePromotionInput) (*models.Promotion, error) {
	panic(fmt.Errorf("not implemented: UpdatePromotion - updatePromotion"))
}

// DeletePromotion is the resolver for the deletePromotion field.
func (r *mutationResolver) DeletePromotion(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeletePromotion - deletePromotion"))
}

// ActivatePromotion is the resolver for the activatePromotion field.
func (r *mutationResolver) ActivatePromotion(ctx context.Context, id string) (*models.Promotion, error) {
	panic(fmt.Errorf("not implemented: ActivatePromotion - activatePromotion"))
}

// DeactivatePromotion is the resolver for the deactivatePromotion field.
func (r *mutationResolver) DeactivatePromotion(ctx context.Context, id string) (*models.Promotion, error) {
	panic(fmt.Errorf("not implemented: DeactivatePromotion - deactivatePromotion"))
}

// GenerateDiscountCodes is the resolver for the generateDiscountCodes field.
func (r *mutationResolver) GenerateDiscountCodes(ctx context.Context, input GenerateDiscountCodesInput) ([]*models.DiscountCode, error) {
	panic(fmt.Errorf("not implemented: GenerateDiscountCodes - generateDiscountCodes"))
}

// UpdateDiscountCode is the resolver for the updateDiscountCode field.
func (r *mutationResolver) UpdateDiscountCode(ctx context.Context, id string, input UpdateDiscountCodeInput) (*models.DiscountCode, error) {
	panic(fmt.Errorf("not implemented: UpdateDiscountCode - updateDiscountCode"))
}

// DeleteDiscountCode is the resolver for the deleteDiscountCode field.
func (r *mutationResolver) DeleteDiscountCode(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteDiscountCode - deleteDiscountCode"))
}

// CreateCampaign is the resolver for the createCampaign field.
func (r *mutationResolver) CreateCampaign(ctx context.Context, input CreateCampaignInput) (*models.Campaign, error) {
	panic(fmt.Errorf("not implemented: CreateCampaign - createCampaign"))
}

// UpdateCampaign is the resolver for the updateCampaign field.
func (r *mutationResolver) UpdateCampaign(ctx context.Context, id string, input UpdateCampaignInput) (*models.Campaign, error) {
	panic(fmt.Errorf("not implemented: UpdateCampaign - updateCampaign"))
}

// DeleteCampaign is the resolver for the deleteCampaign field.
func (r *mutationResolver) DeleteCampaign(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCampaign - deleteCampaign"))
}

// ApplyDiscount is the resolver for the applyDiscount field.
func (r *mutationResolver) ApplyDiscount(ctx context.Context, input ApplyDiscountInput) (*models.DiscountApplication, error) {
	panic(fmt.Errorf("not implemented: ApplyDiscount - applyDiscount"))
}

// ID is the resolver for the id field.
func (r *promotionResolver) ID(ctx context.Context, obj *models.Promotion) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// MerchantID is the resolver for the merchantId field.
func (r *promotionResolver) MerchantID(ctx context.Context, obj *models.Promotion) (string, error) {
	panic(fmt.Errorf("not implemented: MerchantID - merchantId"))
}

// Type is the resolver for the type field.
func (r *promotionResolver) Type(ctx context.Context, obj *models.Promotion) (PromotionType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Status is the resolver for the status field.
func (r *promotionResolver) Status(ctx context.Context, obj *models.Promotion) (PromotionStatus, error) {
	panic(fmt.Errorf("not implemented: Status - status"))
}

// DiscountType is the resolver for the discountType field.
func (r *promotionResolver) DiscountType(ctx context.Context, obj *models.Promotion) (DiscountType, error) {
	panic(fmt.Errorf("not implemented: DiscountType - discountType"))
}

// DiscountValue is the resolver for the discountValue field.
func (r *promotionResolver) DiscountValue(ctx context.Context, obj *models.Promotion) (float64, error) {
	panic(fmt.Errorf("not implemented: DiscountValue - discountValue"))
}

// MinimumRequirements is the resolver for the minimumRequirements field.
func (r *promotionResolver) MinimumRequirements(ctx context.Context, obj *models.Promotion) (*models.MinimumRequirements, error) {
	panic(fmt.Errorf("not implemented: MinimumRequirements - minimumRequirements"))
}

// UsageLimits is the resolver for the usageLimits field.
func (r *promotionResolver) UsageLimits(ctx context.Context, obj *models.Promotion) (*models.UsageLimits, error) {
	panic(fmt.Errorf("not implemented: UsageLimits - usageLimits"))
}

// ApplicableProducts is the resolver for the applicableProducts field.
func (r *promotionResolver) ApplicableProducts(ctx context.Context, obj *models.Promotion) ([]string, error) {
	panic(fmt.Errorf("not implemented: ApplicableProducts - applicableProducts"))
}

// ApplicableCollections is the resolver for the applicableCollections field.
func (r *promotionResolver) ApplicableCollections(ctx context.Context, obj *models.Promotion) ([]string, error) {
	panic(fmt.Errorf("not implemented: ApplicableCollections - applicableCollections"))
}

// ApplicableCustomers is the resolver for the applicableCustomers field.
func (r *promotionResolver) ApplicableCustomers(ctx context.Context, obj *models.Promotion) ([]string, error) {
	panic(fmt.Errorf("not implemented: ApplicableCustomers - applicableCustomers"))
}

// StartsAt is the resolver for the startsAt field.
func (r *promotionResolver) StartsAt(ctx context.Context, obj *models.Promotion) (string, error) {
	panic(fmt.Errorf("not implemented: StartsAt - startsAt"))
}

// EndsAt is the resolver for the endsAt field.
func (r *promotionResolver) EndsAt(ctx context.Context, obj *models.Promotion) (*string, error) {
	panic(fmt.Errorf("not implemented: EndsAt - endsAt"))
}

// InternalNotes is the resolver for the internalNotes field.
func (r *promotionResolver) InternalNotes(ctx context.Context, obj *models.Promotion) (*string, error) {
	panic(fmt.Errorf("not implemented: InternalNotes - internalNotes"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *promotionResolver) CreatedAt(ctx context.Context, obj *models.Promotion) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *promotionResolver) UpdatedAt(ctx context.Context, obj *models.Promotion) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// Applications is the resolver for the applications field.
func (r *promotionResolver) Applications(ctx context.Context, obj *models.Promotion) ([]*models.DiscountApplication, error) {
	panic(fmt.Errorf("not implemented: Applications - applications"))
}

// Campaign is the resolver for the campaign field.
func (r *promotionResolver) Campaign(ctx context.Context, obj *models.Promotion) (*models.Campaign, error) {
	panic(fmt.Errorf("not implemented: Campaign - campaign"))
}

// Promotion is the resolver for the promotion field.
func (r *queryResolver) Promotion(ctx context.Context, id string) (*models.Promotion, error) {
	panic(fmt.Errorf("not implemented: Promotion - promotion"))
}

// Promotions is the resolver for the promotions field.
func (r *queryResolver) Promotions(ctx context.Context, filter *PromotionFilter) ([]*models.Promotion, error) {
	panic(fmt.Errorf("not implemented: Promotions - promotions"))
}

// ActivePromotions is the resolver for the activePromotions field.
func (r *queryResolver) ActivePromotions(ctx context.Context, merchantID string) ([]*models.Promotion, error) {
	panic(fmt.Errorf("not implemented: ActivePromotions - activePromotions"))
}

// DiscountCode is the resolver for the discountCode field.
func (r *queryResolver) DiscountCode(ctx context.Context, code string) (*models.DiscountCode, error) {
	panic(fmt.Errorf("not implemented: DiscountCode - discountCode"))
}

// DiscountCodes is the resolver for the discountCodes field.
func (r *queryResolver) DiscountCodes(ctx context.Context, promotionID *string) ([]*models.DiscountCode, error) {
	panic(fmt.Errorf("not implemented: DiscountCodes - discountCodes"))
}

// ValidateDiscountCode is the resolver for the validateDiscountCode field.
func (r *queryResolver) ValidateDiscountCode(ctx context.Context, code string, cartTotal float64) (*DiscountCodeValidation, error) {
	panic(fmt.Errorf("not implemented: ValidateDiscountCode - validateDiscountCode"))
}

// Campaign is the resolver for the campaign field.
func (r *queryResolver) Campaign(ctx context.Context, id string) (*models.Campaign, error) {
	panic(fmt.Errorf("not implemented: Campaign - campaign"))
}

// Campaigns is the resolver for the campaigns field.
func (r *queryResolver) Campaigns(ctx context.Context, filter *CampaignFilter) ([]*models.Campaign, error) {
	panic(fmt.Errorf("not implemented: Campaigns - campaigns"))
}

// Campaign returns CampaignResolver implementation.
func (r *Resolver) Campaign() CampaignResolver { return &campaignResolver{r} }

// DiscountApplication returns DiscountApplicationResolver implementation.
func (r *Resolver) DiscountApplication() DiscountApplicationResolver {
	return &discountApplicationResolver{r}
}

// DiscountCode returns DiscountCodeResolver implementation.
func (r *Resolver) DiscountCode() DiscountCodeResolver { return &discountCodeResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Promotion returns PromotionResolver implementation.
func (r *Resolver) Promotion() PromotionResolver { return &promotionResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type campaignResolver struct{ *Resolver }
type discountApplicationResolver struct{ *Resolver }
type discountCodeResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type promotionResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
