package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"unified-commerce/services/inventory/models"
)

// FindAddressByFirstNameAndLastNameAndStreet1AndStreet2AndCityAndStateAndCountryAndPostalCode is the resolver for the findAddressByFirstNameAndLastNameAndStreet1AndStreet2AndCityAndStateAndCountryAndPostalCode field.
func (r *entityResolver) FindAddressByFirstNameAndLastNameAndStreet1AndStreet2AndCityAndStateAndCountryAndPostalCode(ctx context.Context, firstName *string, lastName *string, street1 *string, street2 *string, city *string, state *string, country *string, postalCode *string) (*models.Address, error) {
	panic(fmt.Errorf("not implemented: FindAddressByFirstNameAndLastNameAndStreet1AndStreet2AndCityAndStateAndCountryAndPostalCode - findAddressByFirstNameAndLastNameAndStreet1AndStreet2AndCityAndStateAndCountryAndPostalCode"))
}

// FindInventoryItemByID is the resolver for the findInventoryItemByID field.
func (r *entityResolver) FindInventoryItemByID(ctx context.Context, id string) (*models.InventoryItem, error) {
	panic(fmt.Errorf("not implemented: FindInventoryItemByID - findInventoryItemByID"))
}

// FindLocationByID is the resolver for the findLocationByID field.
func (r *entityResolver) FindLocationByID(ctx context.Context, id string) (*models.Location, error) {
	panic(fmt.Errorf("not implemented: FindLocationByID - findLocationByID"))
}

// FindStockMovementByID is the resolver for the findStockMovementByID field.
func (r *entityResolver) FindStockMovementByID(ctx context.Context, id string) (*models.StockMovement, error) {
	panic(fmt.Errorf("not implemented: FindStockMovementByID - findStockMovementByID"))
}

// Entity returns EntityResolver implementation.
func (r *Resolver) Entity() EntityResolver { return &entityResolver{r} }

type entityResolver struct{ *Resolver }
