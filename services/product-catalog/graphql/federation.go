// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"context"
	"errors"
	"fmt"
	"strings"
	"sync"

	"github.com/99designs/gqlgen/plugin/federation/fedruntime"
)

var (
	ErrUnknownType  = errors.New("unknown type")
	ErrTypeNotFound = errors.New("type not found")
)

func (ec *executionContext) __resolve__service(ctx context.Context) (fedruntime.Service, error) {
	if ec.DisableIntrospection {
		return fedruntime.Service{}, errors.New("federated introspection disabled")
	}

	var sdl []string

	for _, src := range sources {
		if src.BuiltIn {
			continue
		}
		sdl = append(sdl, src.Input)
	}

	return fedruntime.Service{
		SDL: strings.Join(sdl, "\n"),
	}, nil
}

func (ec *executionContext) __resolve_entities(ctx context.Context, representations []map[string]any) []fedruntime.Entity {
	list := make([]fedruntime.Entity, len(representations))

	repsMap := ec.buildRepresentationGroups(ctx, representations)

	switch len(repsMap) {
	case 0:
		return list
	case 1:
		for typeName, reps := range repsMap {
			ec.resolveEntityGroup(ctx, typeName, reps, list)
		}
		return list
	default:
		var g sync.WaitGroup
		g.Add(len(repsMap))
		for typeName, reps := range repsMap {
			go func(typeName string, reps []EntityWithIndex) {
				ec.resolveEntityGroup(ctx, typeName, reps, list)
				g.Done()
			}(typeName, reps)
		}
		g.Wait()
		return list
	}
}

type EntityWithIndex struct {
	// The index in the original representation array
	index  int
	entity EntityRepresentation
}

// EntityRepresentation is the JSON representation of an entity sent by the Router
// used as the inputs for us to resolve.
//
// We make it a map because we know the top level JSON is always an object.
type EntityRepresentation map[string]any

// We group entities by typename so that we can parallelize their resolution.
// This is particularly helpful when there are entity groups in multi mode.
func (ec *executionContext) buildRepresentationGroups(
	ctx context.Context,
	representations []map[string]any,
) map[string][]EntityWithIndex {
	repsMap := make(map[string][]EntityWithIndex)
	for i, rep := range representations {
		typeName, ok := rep["__typename"].(string)
		if !ok {
			// If there is no __typename, we just skip the representation;
			// we just won't be resolving these unknown types.
			ec.Error(ctx, errors.New("__typename must be an existing string"))
			continue
		}

		repsMap[typeName] = append(repsMap[typeName], EntityWithIndex{
			index:  i,
			entity: rep,
		})
	}

	return repsMap
}

func (ec *executionContext) resolveEntityGroup(
	ctx context.Context,
	typeName string,
	reps []EntityWithIndex,
	list []fedruntime.Entity,
) {
	if isMulti(typeName) {
		err := ec.resolveManyEntities(ctx, typeName, reps, list)
		if err != nil {
			ec.Error(ctx, err)
		}
	} else {
		// if there are multiple entities to resolve, parallelize (similar to
		// graphql.FieldSet.Dispatch)
		var e sync.WaitGroup
		e.Add(len(reps))
		for i, rep := range reps {
			i, rep := i, rep
			go func(i int, rep EntityWithIndex) {
				entity, err := ec.resolveEntity(ctx, typeName, rep.entity)
				if err != nil {
					ec.Error(ctx, err)
				} else {
					list[rep.index] = entity
				}
				e.Done()
			}(i, rep)
		}
		e.Wait()
	}
}

func isMulti(typeName string) bool {
	switch typeName {
	default:
		return false
	}
}

func (ec *executionContext) resolveEntity(
	ctx context.Context,
	typeName string,
	rep EntityRepresentation,
) (e fedruntime.Entity, err error) {
	// we need to do our own panic handling, because we may be called in a
	// goroutine, where the usual panic handling can't catch us
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
		}
	}()

	switch typeName {
	case "Brand":
		resolverName, err := entityResolverNameForBrand(ctx, rep)
		if err != nil {
			return nil, fmt.Errorf(`finding resolver for Entity "Brand": %w`, err)
		}
		switch resolverName {

		case "findBrandByID":
			id0, err := ec.unmarshalNID2string(ctx, rep["id"])
			if err != nil {
				return nil, fmt.Errorf(`unmarshalling param 0 for findBrandByID(): %w`, err)
			}
			entity, err := ec.resolvers.Entity().FindBrandByID(ctx, id0)
			if err != nil {
				return nil, fmt.Errorf(`resolving Entity "Brand": %w`, err)
			}

			return entity, nil
		}
	case "Category":
		resolverName, err := entityResolverNameForCategory(ctx, rep)
		if err != nil {
			return nil, fmt.Errorf(`finding resolver for Entity "Category": %w`, err)
		}
		switch resolverName {

		case "findCategoryByID":
			id0, err := ec.unmarshalNID2string(ctx, rep["id"])
			if err != nil {
				return nil, fmt.Errorf(`unmarshalling param 0 for findCategoryByID(): %w`, err)
			}
			entity, err := ec.resolvers.Entity().FindCategoryByID(ctx, id0)
			if err != nil {
				return nil, fmt.Errorf(`resolving Entity "Category": %w`, err)
			}

			return entity, nil
		}
	case "Collection":
		resolverName, err := entityResolverNameForCollection(ctx, rep)
		if err != nil {
			return nil, fmt.Errorf(`finding resolver for Entity "Collection": %w`, err)
		}
		switch resolverName {

		case "findCollectionByID":
			id0, err := ec.unmarshalNID2string(ctx, rep["id"])
			if err != nil {
				return nil, fmt.Errorf(`unmarshalling param 0 for findCollectionByID(): %w`, err)
			}
			entity, err := ec.resolvers.Entity().FindCollectionByID(ctx, id0)
			if err != nil {
				return nil, fmt.Errorf(`resolving Entity "Collection": %w`, err)
			}

			return entity, nil
		}
	case "Product":
		resolverName, err := entityResolverNameForProduct(ctx, rep)
		if err != nil {
			return nil, fmt.Errorf(`finding resolver for Entity "Product": %w`, err)
		}
		switch resolverName {

		case "findProductByID":
			id0, err := ec.unmarshalNID2string(ctx, rep["id"])
			if err != nil {
				return nil, fmt.Errorf(`unmarshalling param 0 for findProductByID(): %w`, err)
			}
			entity, err := ec.resolvers.Entity().FindProductByID(ctx, id0)
			if err != nil {
				return nil, fmt.Errorf(`resolving Entity "Product": %w`, err)
			}

			return entity, nil
		}
	case "ProductVariant":
		resolverName, err := entityResolverNameForProductVariant(ctx, rep)
		if err != nil {
			return nil, fmt.Errorf(`finding resolver for Entity "ProductVariant": %w`, err)
		}
		switch resolverName {

		case "findProductVariantByID":
			id0, err := ec.unmarshalNID2string(ctx, rep["id"])
			if err != nil {
				return nil, fmt.Errorf(`unmarshalling param 0 for findProductVariantByID(): %w`, err)
			}
			entity, err := ec.resolvers.Entity().FindProductVariantByID(ctx, id0)
			if err != nil {
				return nil, fmt.Errorf(`resolving Entity "ProductVariant": %w`, err)
			}

			return entity, nil
		}

	}
	return nil, fmt.Errorf("%w: %s", ErrUnknownType, typeName)
}

func (ec *executionContext) resolveManyEntities(
	ctx context.Context,
	typeName string,
	reps []EntityWithIndex,
	list []fedruntime.Entity,
) (err error) {
	// we need to do our own panic handling, because we may be called in a
	// goroutine, where the usual panic handling can't catch us
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
		}
	}()

	switch typeName {

	default:
		return errors.New("unknown type: " + typeName)
	}
}

func entityResolverNameForBrand(ctx context.Context, rep EntityRepresentation) (string, error) {
	// we collect errors because a later entity resolver may work fine
	// when an entity has multiple keys
	entityResolverErrs := []error{}
	for {
		var (
			m   EntityRepresentation
			val any
			ok  bool
		)
		_ = val
		// if all of the KeyFields values for this resolver are null,
		// we shouldn't use use it
		allNull := true
		m = rep
		val, ok = m["id"]
		if !ok {
			entityResolverErrs = append(entityResolverErrs,
				fmt.Errorf("%w due to missing Key Field \"id\" for Brand", ErrTypeNotFound))
			break
		}
		if allNull {
			allNull = val == nil
		}
		if allNull {
			entityResolverErrs = append(entityResolverErrs,
				fmt.Errorf("%w due to all null value KeyFields for Brand", ErrTypeNotFound))
			break
		}
		return "findBrandByID", nil
	}
	return "", fmt.Errorf("%w for Brand due to %v", ErrTypeNotFound,
		errors.Join(entityResolverErrs...).Error())
}

func entityResolverNameForCategory(ctx context.Context, rep EntityRepresentation) (string, error) {
	// we collect errors because a later entity resolver may work fine
	// when an entity has multiple keys
	entityResolverErrs := []error{}
	for {
		var (
			m   EntityRepresentation
			val any
			ok  bool
		)
		_ = val
		// if all of the KeyFields values for this resolver are null,
		// we shouldn't use use it
		allNull := true
		m = rep
		val, ok = m["id"]
		if !ok {
			entityResolverErrs = append(entityResolverErrs,
				fmt.Errorf("%w due to missing Key Field \"id\" for Category", ErrTypeNotFound))
			break
		}
		if allNull {
			allNull = val == nil
		}
		if allNull {
			entityResolverErrs = append(entityResolverErrs,
				fmt.Errorf("%w due to all null value KeyFields for Category", ErrTypeNotFound))
			break
		}
		return "findCategoryByID", nil
	}
	return "", fmt.Errorf("%w for Category due to %v", ErrTypeNotFound,
		errors.Join(entityResolverErrs...).Error())
}

func entityResolverNameForCollection(ctx context.Context, rep EntityRepresentation) (string, error) {
	// we collect errors because a later entity resolver may work fine
	// when an entity has multiple keys
	entityResolverErrs := []error{}
	for {
		var (
			m   EntityRepresentation
			val any
			ok  bool
		)
		_ = val
		// if all of the KeyFields values for this resolver are null,
		// we shouldn't use use it
		allNull := true
		m = rep
		val, ok = m["id"]
		if !ok {
			entityResolverErrs = append(entityResolverErrs,
				fmt.Errorf("%w due to missing Key Field \"id\" for Collection", ErrTypeNotFound))
			break
		}
		if allNull {
			allNull = val == nil
		}
		if allNull {
			entityResolverErrs = append(entityResolverErrs,
				fmt.Errorf("%w due to all null value KeyFields for Collection", ErrTypeNotFound))
			break
		}
		return "findCollectionByID", nil
	}
	return "", fmt.Errorf("%w for Collection due to %v", ErrTypeNotFound,
		errors.Join(entityResolverErrs...).Error())
}

func entityResolverNameForProduct(ctx context.Context, rep EntityRepresentation) (string, error) {
	// we collect errors because a later entity resolver may work fine
	// when an entity has multiple keys
	entityResolverErrs := []error{}
	for {
		var (
			m   EntityRepresentation
			val any
			ok  bool
		)
		_ = val
		// if all of the KeyFields values for this resolver are null,
		// we shouldn't use use it
		allNull := true
		m = rep
		val, ok = m["id"]
		if !ok {
			entityResolverErrs = append(entityResolverErrs,
				fmt.Errorf("%w due to missing Key Field \"id\" for Product", ErrTypeNotFound))
			break
		}
		if allNull {
			allNull = val == nil
		}
		if allNull {
			entityResolverErrs = append(entityResolverErrs,
				fmt.Errorf("%w due to all null value KeyFields for Product", ErrTypeNotFound))
			break
		}
		return "findProductByID", nil
	}
	return "", fmt.Errorf("%w for Product due to %v", ErrTypeNotFound,
		errors.Join(entityResolverErrs...).Error())
}

func entityResolverNameForProductVariant(ctx context.Context, rep EntityRepresentation) (string, error) {
	// we collect errors because a later entity resolver may work fine
	// when an entity has multiple keys
	entityResolverErrs := []error{}
	for {
		var (
			m   EntityRepresentation
			val any
			ok  bool
		)
		_ = val
		// if all of the KeyFields values for this resolver are null,
		// we shouldn't use use it
		allNull := true
		m = rep
		val, ok = m["id"]
		if !ok {
			entityResolverErrs = append(entityResolverErrs,
				fmt.Errorf("%w due to missing Key Field \"id\" for ProductVariant", ErrTypeNotFound))
			break
		}
		if allNull {
			allNull = val == nil
		}
		if allNull {
			entityResolverErrs = append(entityResolverErrs,
				fmt.Errorf("%w due to all null value KeyFields for ProductVariant", ErrTypeNotFound))
			break
		}
		return "findProductVariantByID", nil
	}
	return "", fmt.Errorf("%w for ProductVariant due to %v", ErrTypeNotFound,
		errors.Join(entityResolverErrs...).Error())
}
