{"version":3,"sources":["/Users/kevin/Dev/OpenSource/http/response-iterator/src/iterators/reader.ts"],"sourcesContent":["const hasIterator = typeof Symbol !== 'undefined' && Symbol.asyncIterator;\n\n/* c8 ignore start */\nexport default function readerIterator<T, TReturn = unknown, TNext = unknown>(reader: ReadableStreamReader<T>): AsyncIterableIterator<T, TReturn, TNext> {\n  const iterator = {\n    next(): Promise<IteratorResult<T, TReturn>> {\n      return reader.read(undefined) as Promise<IteratorResult<T, TReturn>>;\n    },\n  };\n\n  if (hasIterator) {\n    iterator[Symbol.asyncIterator] = function (): AsyncIterator<T, TReturn> {\n      return this;\n    };\n  }\n\n  return iterator as AsyncIterableIterator<T, TReturn, TNext>;\n}\n/* c8 ignore stop */\n"],"names":["hasIterator","Symbol","asyncIterator","readerIterator","reader","iterator","next","read","undefined"],"mappings":"AAAA,MAAMA,cAAc,OAAOC,WAAW,eAAeA,OAAOC,aAAa;AAEzE,mBAAmB,GACnB,eAAe,SAASC,eAAsDC,MAA+B;IAC3G,MAAMC,WAAW;QACfC;YACE,OAAOF,OAAOG,IAAI,CAACC;QACrB;IACF;IAEA,IAAIR,aAAa;QACfK,QAAQ,CAACJ,OAAOC,aAAa,CAAC,GAAG;YAC/B,OAAO,IAAI;QACb;IACF;IAEA,OAAOG;AACT,EACA,kBAAkB"}