// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type TransactionKind string

const (
	TransactionKindAuthorization TransactionKind = "AUTHORIZATION"
	TransactionKindCapture       TransactionKind = "CAPTURE"
	TransactionKindSale          TransactionKind = "SALE"
	TransactionKindVoid          TransactionKind = "VOID"
	TransactionKindRefund        TransactionKind = "REFUND"
)

var AllTransactionKind = []TransactionKind{
	TransactionKindAuthorization,
	TransactionKindCapture,
	TransactionKindSale,
	TransactionKindVoid,
	TransactionKindRefund,
}

func (e TransactionKind) IsValid() bool {
	switch e {
	case TransactionKindAuthorization, TransactionKindCapture, TransactionKindSale, TransactionKindVoid, TransactionKindRefund:
		return true
	}
	return false
}

func (e TransactionKind) String() string {
	return string(e)
}

func (e *TransactionKind) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TransactionKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TransactionKind", str)
	}
	return nil
}

func (e TransactionKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *TransactionKind) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e TransactionKind) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
