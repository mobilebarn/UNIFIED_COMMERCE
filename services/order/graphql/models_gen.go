// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"unified-commerce/services/order/models"
)

type AddOrderLineItemInput struct {
	OrderID          string  `json:"orderId"`
	ProductID        string  `json:"productId"`
	ProductVariantID *string `json:"productVariantId,omitempty"`
	Quantity         int     `json:"quantity"`
	Price            float64 `json:"price"`
	Name             string  `json:"name"`
	Sku              string  `json:"sku"`
	Properties       *string `json:"properties,omitempty"`
}

type AddressInput struct {
	FirstName  *string  `json:"firstName,omitempty"`
	LastName   *string  `json:"lastName,omitempty"`
	Company    *string  `json:"company,omitempty"`
	Street1    *string  `json:"street1,omitempty"`
	Street2    *string  `json:"street2,omitempty"`
	City       *string  `json:"city,omitempty"`
	State      *string  `json:"state,omitempty"`
	Country    *string  `json:"country,omitempty"`
	PostalCode *string  `json:"postalCode,omitempty"`
	Phone      *string  `json:"phone,omitempty"`
	Latitude   *float64 `json:"latitude,omitempty"`
	Longitude  *float64 `json:"longitude,omitempty"`
}

type CreateOrderInput struct {
	MerchantID      string              `json:"merchantId"`
	CustomerID      *string             `json:"customerId,omitempty"`
	Customer        *CustomerInfoInput  `json:"customer"`
	BillingAddress  *AddressInput       `json:"billingAddress"`
	ShippingAddress *AddressInput       `json:"shippingAddress"`
	Currency        *string             `json:"currency,omitempty"`
	Source          *models.OrderSource `json:"source,omitempty"`
	Channel         *string             `json:"channel,omitempty"`
	Notes           *string             `json:"notes,omitempty"`
}

type CustomerInfoInput struct {
	Email            string  `json:"email"`
	Phone            *string `json:"phone,omitempty"`
	FirstName        string  `json:"firstName"`
	LastName         string  `json:"lastName"`
	AcceptsMarketing *bool   `json:"acceptsMarketing,omitempty"`
}

type FulfillLineItemInput struct {
	LineItemID string `json:"lineItemId"`
	Quantity   int    `json:"quantity"`
}

type FulfillOrderInput struct {
	LineItems      []*FulfillLineItemInput `json:"lineItems"`
	TrackingNumber *string                 `json:"trackingNumber,omitempty"`
	Carrier        *string                 `json:"carrier,omitempty"`
	NotifyCustomer *bool                   `json:"notifyCustomer,omitempty"`
}

type Mutation struct {
}

type OrderFilter struct {
	CustomerID        *string                   `json:"customerId,omitempty"`
	MerchantID        *string                   `json:"merchantId,omitempty"`
	Status            *models.OrderStatus       `json:"status,omitempty"`
	FulfillmentStatus *models.FulfillmentStatus `json:"fulfillmentStatus,omitempty"`
	PaymentStatus     *models.PaymentStatus     `json:"paymentStatus,omitempty"`
	Source            *models.OrderSource       `json:"source,omitempty"`
	Limit             *int                      `json:"limit,omitempty"`
	Offset            *int                      `json:"offset,omitempty"`
}

type Query struct {
}

type RefundOrderInput struct {
	Amount         float64 `json:"amount"`
	Reason         *string `json:"reason,omitempty"`
	Note           *string `json:"note,omitempty"`
	NotifyCustomer *bool   `json:"notifyCustomer,omitempty"`
}

type UpdateOrderInput struct {
	Status        *models.OrderStatus `json:"status,omitempty"`
	Notes         *string             `json:"notes,omitempty"`
	InternalNotes *string             `json:"internalNotes,omitempty"`
	Tags          []string            `json:"tags,omitempty"`
}

type UpdateOrderLineItemInput struct {
	Quantity   *int     `json:"quantity,omitempty"`
	Price      *float64 `json:"price,omitempty"`
	Properties *string  `json:"properties,omitempty"`
}

type LineItemFulfillmentStatus string

const (
	LineItemFulfillmentStatusUnfulfilled LineItemFulfillmentStatus = "UNFULFILLED"
	LineItemFulfillmentStatusFulfilled   LineItemFulfillmentStatus = "FULFILLED"
	LineItemFulfillmentStatusRestocked   LineItemFulfillmentStatus = "RESTOCKED"
)

var AllLineItemFulfillmentStatus = []LineItemFulfillmentStatus{
	LineItemFulfillmentStatusUnfulfilled,
	LineItemFulfillmentStatusFulfilled,
	LineItemFulfillmentStatusRestocked,
}

func (e LineItemFulfillmentStatus) IsValid() bool {
	switch e {
	case LineItemFulfillmentStatusUnfulfilled, LineItemFulfillmentStatusFulfilled, LineItemFulfillmentStatusRestocked:
		return true
	}
	return false
}

func (e LineItemFulfillmentStatus) String() string {
	return string(e)
}

func (e *LineItemFulfillmentStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LineItemFulfillmentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LineItemFulfillmentStatus", str)
	}
	return nil
}

func (e LineItemFulfillmentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *LineItemFulfillmentStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e LineItemFulfillmentStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type TransactionKind string

const (
	TransactionKindAuthorization TransactionKind = "AUTHORIZATION"
	TransactionKindCapture       TransactionKind = "CAPTURE"
	TransactionKindSale          TransactionKind = "SALE"
	TransactionKindVoid          TransactionKind = "VOID"
	TransactionKindRefund        TransactionKind = "REFUND"
)

var AllTransactionKind = []TransactionKind{
	TransactionKindAuthorization,
	TransactionKindCapture,
	TransactionKindSale,
	TransactionKindVoid,
	TransactionKindRefund,
}

func (e TransactionKind) IsValid() bool {
	switch e {
	case TransactionKindAuthorization, TransactionKindCapture, TransactionKindSale, TransactionKindVoid, TransactionKindRefund:
		return true
	}
	return false
}

func (e TransactionKind) String() string {
	return string(e)
}

func (e *TransactionKind) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TransactionKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TransactionKind", str)
	}
	return nil
}

func (e TransactionKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *TransactionKind) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e TransactionKind) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type TransactionStatus string

const (
	TransactionStatusPending TransactionStatus = "PENDING"
	TransactionStatusSuccess TransactionStatus = "SUCCESS"
	TransactionStatusFailure TransactionStatus = "FAILURE"
	TransactionStatusError   TransactionStatus = "ERROR"
)

var AllTransactionStatus = []TransactionStatus{
	TransactionStatusPending,
	TransactionStatusSuccess,
	TransactionStatusFailure,
	TransactionStatusError,
}

func (e TransactionStatus) IsValid() bool {
	switch e {
	case TransactionStatusPending, TransactionStatusSuccess, TransactionStatusFailure, TransactionStatusError:
		return true
	}
	return false
}

func (e TransactionStatus) String() string {
	return string(e)
}

func (e *TransactionStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TransactionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TransactionStatus", str)
	}
	return nil
}

func (e TransactionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *TransactionStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e TransactionStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
