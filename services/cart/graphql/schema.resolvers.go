package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"unified-commerce/services/cart/models"
)

// ID is the resolver for the id field.
func (r *cartResolver) ID(ctx context.Context, obj *models.Cart) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// CustomerID is the resolver for the customerId field.
func (r *cartResolver) CustomerID(ctx context.Context, obj *models.Cart) (*string, error) {
	panic(fmt.Errorf("not implemented: CustomerID - customerId"))
}

// MerchantID is the resolver for the merchantId field.
func (r *cartResolver) MerchantID(ctx context.Context, obj *models.Cart) (string, error) {
	panic(fmt.Errorf("not implemented: MerchantID - merchantId"))
}

// AbandonedAt is the resolver for the abandonedAt field.
func (r *cartResolver) AbandonedAt(ctx context.Context, obj *models.Cart) (*string, error) {
	panic(fmt.Errorf("not implemented: AbandonedAt - abandonedAt"))
}

// RecoveredAt is the resolver for the recoveredAt field.
func (r *cartResolver) RecoveredAt(ctx context.Context, obj *models.Cart) (*string, error) {
	panic(fmt.Errorf("not implemented: RecoveredAt - recoveredAt"))
}

// Attributes is the resolver for the attributes field.
func (r *cartResolver) Attributes(ctx context.Context, obj *models.Cart) (*string, error) {
	panic(fmt.Errorf("not implemented: Attributes - attributes"))
}

// ExpiresAt is the resolver for the expiresAt field.
func (r *cartResolver) ExpiresAt(ctx context.Context, obj *models.Cart) (*string, error) {
	panic(fmt.Errorf("not implemented: ExpiresAt - expiresAt"))
}

// CompletedAt is the resolver for the completedAt field.
func (r *cartResolver) CompletedAt(ctx context.Context, obj *models.Cart) (*string, error) {
	panic(fmt.Errorf("not implemented: CompletedAt - completedAt"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *cartResolver) CreatedAt(ctx context.Context, obj *models.Cart) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *cartResolver) UpdatedAt(ctx context.Context, obj *models.Cart) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// Customer is the resolver for the customer field.
func (r *cartResolver) Customer(ctx context.Context, obj *models.Cart) (*User, error) {
	panic(fmt.Errorf("not implemented: Customer - customer"))
}

// ID is the resolver for the id field.
func (r *cartDiscountApplicationResolver) ID(ctx context.Context, obj *models.CartDiscountApplication) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// CartID is the resolver for the cartId field.
func (r *cartDiscountApplicationResolver) CartID(ctx context.Context, obj *models.CartDiscountApplication) (string, error) {
	panic(fmt.Errorf("not implemented: CartID - cartId"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *cartDiscountApplicationResolver) CreatedAt(ctx context.Context, obj *models.CartDiscountApplication) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *cartDiscountApplicationResolver) UpdatedAt(ctx context.Context, obj *models.CartDiscountApplication) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// ID is the resolver for the id field.
func (r *cartLineItemResolver) ID(ctx context.Context, obj *models.CartLineItem) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// CartID is the resolver for the cartId field.
func (r *cartLineItemResolver) CartID(ctx context.Context, obj *models.CartLineItem) (string, error) {
	panic(fmt.Errorf("not implemented: CartID - cartId"))
}

// ProductID is the resolver for the productId field.
func (r *cartLineItemResolver) ProductID(ctx context.Context, obj *models.CartLineItem) (string, error) {
	panic(fmt.Errorf("not implemented: ProductID - productId"))
}

// ProductVariantID is the resolver for the productVariantId field.
func (r *cartLineItemResolver) ProductVariantID(ctx context.Context, obj *models.CartLineItem) (*string, error) {
	panic(fmt.Errorf("not implemented: ProductVariantID - productVariantId"))
}

// Properties is the resolver for the properties field.
func (r *cartLineItemResolver) Properties(ctx context.Context, obj *models.CartLineItem) (*string, error) {
	panic(fmt.Errorf("not implemented: Properties - properties"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *cartLineItemResolver) CreatedAt(ctx context.Context, obj *models.CartLineItem) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *cartLineItemResolver) UpdatedAt(ctx context.Context, obj *models.CartLineItem) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// ID is the resolver for the id field.
func (r *cartLineItemDiscountAllocationResolver) ID(ctx context.Context, obj *models.CartLineItemDiscountAllocation) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// LineItemID is the resolver for the lineItemId field.
func (r *cartLineItemDiscountAllocationResolver) LineItemID(ctx context.Context, obj *models.CartLineItemDiscountAllocation) (string, error) {
	panic(fmt.Errorf("not implemented: LineItemID - lineItemId"))
}

// DiscountApplicationID is the resolver for the discountApplicationId field.
func (r *cartLineItemDiscountAllocationResolver) DiscountApplicationID(ctx context.Context, obj *models.CartLineItemDiscountAllocation) (string, error) {
	panic(fmt.Errorf("not implemented: DiscountApplicationID - discountApplicationId"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *cartLineItemDiscountAllocationResolver) CreatedAt(ctx context.Context, obj *models.CartLineItemDiscountAllocation) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *cartLineItemDiscountAllocationResolver) UpdatedAt(ctx context.Context, obj *models.CartLineItemDiscountAllocation) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// ID is the resolver for the id field.
func (r *cartShippingLineResolver) ID(ctx context.Context, obj *models.CartShippingLine) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// CartID is the resolver for the cartId field.
func (r *cartShippingLineResolver) CartID(ctx context.Context, obj *models.CartShippingLine) (string, error) {
	panic(fmt.Errorf("not implemented: CartID - cartId"))
}

// CarrierIdentifier is the resolver for the carrierIdentifier field.
func (r *cartShippingLineResolver) CarrierIdentifier(ctx context.Context, obj *models.CartShippingLine) (*string, error) {
	panic(fmt.Errorf("not implemented: CarrierIdentifier - carrierIdentifier"))
}

// RequestedFulfillmentServiceID is the resolver for the requestedFulfillmentServiceId field.
func (r *cartShippingLineResolver) RequestedFulfillmentServiceID(ctx context.Context, obj *models.CartShippingLine) (*string, error) {
	panic(fmt.Errorf("not implemented: RequestedFulfillmentServiceID - requestedFulfillmentServiceId"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *cartShippingLineResolver) CreatedAt(ctx context.Context, obj *models.CartShippingLine) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *cartShippingLineResolver) UpdatedAt(ctx context.Context, obj *models.CartShippingLine) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// ID is the resolver for the id field.
func (r *cartTaxLineResolver) ID(ctx context.Context, obj *models.CartTaxLine) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// CartID is the resolver for the cartId field.
func (r *cartTaxLineResolver) CartID(ctx context.Context, obj *models.CartTaxLine) (string, error) {
	panic(fmt.Errorf("not implemented: CartID - cartId"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *cartTaxLineResolver) CreatedAt(ctx context.Context, obj *models.CartTaxLine) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *cartTaxLineResolver) UpdatedAt(ctx context.Context, obj *models.CartTaxLine) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// CreateCart is the resolver for the createCart field.
func (r *mutationResolver) CreateCart(ctx context.Context, input CreateCartInput) (*models.Cart, error) {
	panic(fmt.Errorf("not implemented: CreateCart - createCart"))
}

// UpdateCart is the resolver for the updateCart field.
func (r *mutationResolver) UpdateCart(ctx context.Context, id string, input UpdateCartInput) (*models.Cart, error) {
	panic(fmt.Errorf("not implemented: UpdateCart - updateCart"))
}

// DeleteCart is the resolver for the deleteCart field.
func (r *mutationResolver) DeleteCart(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCart - deleteCart"))
}

// AddCartLineItem is the resolver for the addCartLineItem field.
func (r *mutationResolver) AddCartLineItem(ctx context.Context, input AddLineItemInput) (*models.CartLineItem, error) {
	panic(fmt.Errorf("not implemented: AddCartLineItem - addCartLineItem"))
}

// UpdateCartLineItem is the resolver for the updateCartLineItem field.
func (r *mutationResolver) UpdateCartLineItem(ctx context.Context, id string, input UpdateLineItemInput) (*models.CartLineItem, error) {
	panic(fmt.Errorf("not implemented: UpdateCartLineItem - updateCartLineItem"))
}

// RemoveCartLineItem is the resolver for the removeCartLineItem field.
func (r *mutationResolver) RemoveCartLineItem(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveCartLineItem - removeCartLineItem"))
}

// ClearCart is the resolver for the clearCart field.
func (r *mutationResolver) ClearCart(ctx context.Context, cartID string) (bool, error) {
	panic(fmt.Errorf("not implemented: ClearCart - clearCart"))
}

// ApplyDiscountCode is the resolver for the applyDiscountCode field.
func (r *mutationResolver) ApplyDiscountCode(ctx context.Context, cartID string, code string) (*models.Cart, error) {
	panic(fmt.Errorf("not implemented: ApplyDiscountCode - applyDiscountCode"))
}

// RemoveDiscountCode is the resolver for the removeDiscountCode field.
func (r *mutationResolver) RemoveDiscountCode(ctx context.Context, cartID string, code string) (*models.Cart, error) {
	panic(fmt.Errorf("not implemented: RemoveDiscountCode - removeDiscountCode"))
}

// UpdateShippingAddress is the resolver for the updateShippingAddress field.
func (r *mutationResolver) UpdateShippingAddress(ctx context.Context, cartID string, address AddressInput) (*models.Cart, error) {
	panic(fmt.Errorf("not implemented: UpdateShippingAddress - updateShippingAddress"))
}

// UpdateBillingAddress is the resolver for the updateBillingAddress field.
func (r *mutationResolver) UpdateBillingAddress(ctx context.Context, cartID string, address AddressInput) (*models.Cart, error) {
	panic(fmt.Errorf("not implemented: UpdateBillingAddress - updateBillingAddress"))
}

// Cart is the resolver for the cart field.
func (r *queryResolver) Cart(ctx context.Context, id string) (*models.Cart, error) {
	panic(fmt.Errorf("not implemented: Cart - cart"))
}

// Carts is the resolver for the carts field.
func (r *queryResolver) Carts(ctx context.Context, filter *CartFilter) ([]*models.Cart, error) {
	panic(fmt.Errorf("not implemented: Carts - carts"))
}

// CartBySession is the resolver for the cartBySession field.
func (r *queryResolver) CartBySession(ctx context.Context, sessionID string) (*models.Cart, error) {
	panic(fmt.Errorf("not implemented: CartBySession - cartBySession"))
}

// CartLineItem is the resolver for the cartLineItem field.
func (r *queryResolver) CartLineItem(ctx context.Context, id string) (*models.CartLineItem, error) {
	panic(fmt.Errorf("not implemented: CartLineItem - cartLineItem"))
}

// Cart returns CartResolver implementation.
func (r *Resolver) Cart() CartResolver { return &cartResolver{r} }

// CartDiscountApplication returns CartDiscountApplicationResolver implementation.
func (r *Resolver) CartDiscountApplication() CartDiscountApplicationResolver {
	return &cartDiscountApplicationResolver{r}
}

// CartLineItem returns CartLineItemResolver implementation.
func (r *Resolver) CartLineItem() CartLineItemResolver { return &cartLineItemResolver{r} }

// CartLineItemDiscountAllocation returns CartLineItemDiscountAllocationResolver implementation.
func (r *Resolver) CartLineItemDiscountAllocation() CartLineItemDiscountAllocationResolver {
	return &cartLineItemDiscountAllocationResolver{r}
}

// CartShippingLine returns CartShippingLineResolver implementation.
func (r *Resolver) CartShippingLine() CartShippingLineResolver { return &cartShippingLineResolver{r} }

// CartTaxLine returns CartTaxLineResolver implementation.
func (r *Resolver) CartTaxLine() CartTaxLineResolver { return &cartTaxLineResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type cartResolver struct{ *Resolver }
type cartDiscountApplicationResolver struct{ *Resolver }
type cartLineItemResolver struct{ *Resolver }
type cartLineItemDiscountAllocationResolver struct{ *Resolver }
type cartShippingLineResolver struct{ *Resolver }
type cartTaxLineResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
