{"version":3,"file":"response-iterator.cjs","sources":["../../src/iterators/async.ts","../../src/iterators/nodeStream.ts","../../src/iterators/promise.ts","../../src/iterators/reader.ts","../../src/index.ts"],"sourcesContent":["export default function asyncIterator<T, TReturn = unknown, TNext = unknown>(source: AsyncIterableIterator<T, TReturn, TNext>): AsyncIterableIterator<T, TReturn, TNext> {\n  const iterator = source[Symbol.asyncIterator]();\n  return {\n    next(): Promise<IteratorResult<T, TReturn>> {\n      return iterator.next();\n    },\n    [Symbol.asyncIterator](): AsyncIterator<T, TReturn, TNext> {\n      return this;\n    },\n  } as AsyncIterableIterator<T, TReturn, TNext>;\n}\n","import type { Readable as NodeReadableStream } from 'stream';\n\nconst hasIterator = typeof Symbol !== 'undefined' && Symbol.asyncIterator;\n\n/* c8 ignore start */\nexport default function nodeStreamIterator<T, TReturn = unknown, TNext = unknown>(stream: NodeReadableStream): AsyncIterableIterator<T, TReturn, TNext> {\n  let cleanup = null;\n  let error = null;\n  let done = false;\n  const data = [];\n  const waiting = [];\n\n  function onData(chunk) {\n    if (error) return;\n    if (waiting.length) return waiting.shift()[0]({ value: chunk, done: false });\n    data.push(chunk);\n  }\n  function onError(err) {\n    error = err;\n    const all = waiting.slice();\n    all.forEach((pair) => {\n      pair[1](err);\n    });\n    !cleanup || cleanup();\n  }\n  function onEnd() {\n    done = true;\n    const all = waiting.slice();\n    all.forEach((pair) => {\n      pair[0]({ value: undefined, done: true });\n    });\n    !cleanup || cleanup();\n  }\n\n  cleanup = () => {\n    cleanup = null;\n    stream.removeListener('data', onData);\n    stream.removeListener('error', onError);\n    stream.removeListener('end', onEnd);\n    stream.removeListener('finish', onEnd);\n    stream.removeListener('close', onEnd);\n  };\n  stream.on('data', onData);\n  stream.on('error', onError);\n  stream.on('end', onEnd);\n  stream.on('finish', onEnd);\n  stream.on('close', onEnd);\n\n  function getNext(): Promise<IteratorResult<T, TReturn>> {\n    return new Promise((resolve, reject) => {\n      if (error) return reject(error);\n      if (data.length) return resolve({ value: data.shift(), done: false });\n      if (done) return resolve({ value: undefined, done: true });\n      waiting.push([resolve, reject]);\n    });\n  }\n\n  const iterator = {\n    next(): Promise<IteratorResult<T, TReturn>> {\n      return getNext();\n    },\n  };\n\n  if (hasIterator) {\n    iterator[Symbol.asyncIterator] = function (): AsyncIterator<T, TReturn> {\n      return this;\n    };\n  }\n\n  return iterator as AsyncIterableIterator<T, TReturn, TNext>;\n}\n/* c8 ignore stop */\n","const hasIterator = typeof Symbol !== 'undefined' && Symbol.asyncIterator;\n\n/* c8 ignore start */\nexport default function promiseIterator<T, TReturn = unknown, TNext = unknown>(promise: Promise<T>): AsyncIterableIterator<T, TReturn, TNext> {\n  let resolved = false;\n\n  const iterator = {\n    next(): Promise<IteratorResult<T, TReturn>> {\n      if (resolved) return Promise.resolve({ value: undefined, done: true });\n      resolved = true;\n      return new Promise((resolve, reject) => {\n        promise\n          .then((value: T) => {\n            resolve({ value, done: false } as IteratorResult<T, TReturn>);\n          })\n          .catch(reject);\n      });\n    },\n  };\n\n  if (hasIterator) {\n    iterator[Symbol.asyncIterator] = function (): AsyncIterator<T, TReturn> {\n      return this;\n    };\n  }\n\n  return iterator as AsyncIterableIterator<T, TReturn, TNext>;\n}\n/* c8 ignore stop */\n","const hasIterator = typeof Symbol !== 'undefined' && Symbol.asyncIterator;\n\n/* c8 ignore start */\nexport default function readerIterator<T, TReturn = unknown, TNext = unknown>(reader: ReadableStreamReader<T>): AsyncIterableIterator<T, TReturn, TNext> {\n  const iterator = {\n    next(): Promise<IteratorResult<T, TReturn>> {\n      return reader.read(undefined) as Promise<IteratorResult<T, TReturn>>;\n    },\n  };\n\n  if (hasIterator) {\n    iterator[Symbol.asyncIterator] = function (): AsyncIterator<T, TReturn> {\n      return this;\n    };\n  }\n\n  return iterator as AsyncIterableIterator<T, TReturn, TNext>;\n}\n/* c8 ignore stop */\n","import type { AxiosResponse } from 'axios';\nimport type { Response as NodeResponse } from 'node-fetch';\nimport type { Readable as NodeReadableStream } from 'stream';\n\nimport asyncIterator from './iterators/async.js';\nimport nodeStreamIterator from './iterators/nodeStream.js';\nimport promiseIterator from './iterators/promise.js';\nimport readerIterator from './iterators/reader.js';\n\ninterface CrossFetchResponse {\n  _bodyBlob: Blob;\n}\n\nconst hasIterator = typeof Symbol !== 'undefined' && Symbol.asyncIterator;\n\n/**\n * @param response A response. Supports fetch, node-fetch, and cross-fetch\n */\nexport default function responseIterator<T, TReturn = unknown, TNext = unknown>(response: unknown): AsyncIterableIterator<T, TReturn, TNext> {\n  if (response === undefined) throw new Error('Missing response for responseIterator');\n\n  // determine the body\n  let body: unknown = response;\n  if ((response as NodeResponse).body) body = (response as NodeResponse).body;\n  // node-fetch, browser fetch, undici\n  else if ((response as AxiosResponse).data) body = (response as AxiosResponse).data;\n  // axios\n  /* c8 ignore start */ else if ((response as CrossFetchResponse)._bodyBlob) body = (response as CrossFetchResponse)._bodyBlob; // cross-fetch\n  /* c8 ignore stop */\n\n  // adapt the body\n  if (hasIterator && body[Symbol.asyncIterator]) return asyncIterator<T, TReturn, TNext>(body as AsyncIterableIterator<T, TReturn, TNext>);\n  /* c8 ignore start */\n  if ((body as ReadableStream<T>).getReader) return readerIterator<T, TReturn, TNext>((body as ReadableStream<T>).getReader());\n  if ((body as Blob).stream) return readerIterator<T, TReturn, TNext>(((body as Blob).stream() as unknown as ReadableStream<T>).getReader());\n  if ((body as Blob).arrayBuffer) return promiseIterator<T, TReturn, TNext>((body as Blob).arrayBuffer() as unknown as Promise<T>);\n  if ((body as NodeReadableStream).pipe) return nodeStreamIterator<T, TReturn, TNext>(body as NodeReadableStream);\n  /* c8 ignore stop */\n\n  throw new Error('Unknown body type for responseIterator. Maybe you are not passing a streamable response');\n}\n"],"names":["asyncIterator","source","iterator","Symbol","next","hasIterator","nodeStreamIterator","stream","cleanup","error","done","data","waiting","onData","chunk","length","shift","value","push","onError","err","all","slice","forEach","pair","onEnd","undefined","removeListener","on","getNext","Promise","resolve","reject","promiseIterator","promise","resolved","then","catch","readerIterator","reader","read","responseIterator","response","Error","body","_bodyBlob","getReader","arrayBuffer","pipe"],"mappings":"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"}