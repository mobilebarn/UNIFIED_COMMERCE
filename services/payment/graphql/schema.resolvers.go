package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"unified-commerce/services/payment/models"

	"github.com/google/uuid"
)

// Timezone is the resolver for the timezone field.
func (r *addressResolver) Timezone(ctx context.Context, obj *models.Address) (*string, error) {
	panic(fmt.Errorf("not implemented: Timezone - timezone"))
}

// CreatePayment implements MutationResolver
func (r *mutationResolver) CreatePayment(ctx context.Context, input models.CreatePaymentInput) (*models.Payment, error) {
	r.Logger.WithField("input", input).Info("Creating payment")

	// Generate UUIDs for proper types
	paymentID := uuid.New()
	var orderID uuid.UUID
	if input.OrderID != nil {
		orderID, _ = uuid.Parse(*input.OrderID)
	}
	var customerID *uuid.UUID
	if input.CustomerID != nil {
		cid, _ := uuid.Parse(*input.CustomerID)
		customerID = &cid
	}
	merchantID, _ := uuid.Parse(input.MerchantID)

	return &models.Payment{
		ID:         paymentID,
		OrderID:    orderID,
		CustomerID: customerID,
		MerchantID: merchantID,
		Amount:     input.Amount,
		Currency:   input.Currency,
		Status:     "pending",
	}, nil
}

// CapturePaymentTransaction is the resolver for the capturePaymentTransaction field.
func (r *mutationResolver) CapturePaymentTransaction(ctx context.Context, id string, amount *float64) (*models.Payment, error) {
	panic(fmt.Errorf("not implemented: CapturePaymentTransaction - capturePaymentTransaction"))
}

// RefundPayment is the resolver for the refundPayment field.
func (r *mutationResolver) RefundPayment(ctx context.Context, id string, input models.RefundPaymentInput) (*models.Payment, error) {
	panic(fmt.Errorf("not implemented: RefundPayment - refundPayment"))
}

// VoidPayment is the resolver for the voidPayment field.
func (r *mutationResolver) VoidPayment(ctx context.Context, id string) (*models.Payment, error) {
	panic(fmt.Errorf("not implemented: VoidPayment - voidPayment"))
}

// CreatePaymentMethod is the resolver for the createPaymentMethod field.
func (r *mutationResolver) CreatePaymentMethod(ctx context.Context, input models.CreatePaymentMethodInput) (*models.PaymentMethod, error) {
	panic(fmt.Errorf("not implemented: CreatePaymentMethod - createPaymentMethod"))
}

// UpdatePaymentMethod is the resolver for the updatePaymentMethod field.
func (r *mutationResolver) UpdatePaymentMethod(ctx context.Context, id string, input models.UpdatePaymentMethodInput) (*models.PaymentMethod, error) {
	panic(fmt.Errorf("not implemented: UpdatePaymentMethod - updatePaymentMethod"))
}

// DeletePaymentMethod is the resolver for the deletePaymentMethod field.
func (r *mutationResolver) DeletePaymentMethod(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeletePaymentMethod - deletePaymentMethod"))
}

// SetDefaultPaymentMethod is the resolver for the setDefaultPaymentMethod field.
func (r *mutationResolver) SetDefaultPaymentMethod(ctx context.Context, id string, customerID string) (*models.PaymentMethod, error) {
	panic(fmt.Errorf("not implemented: SetDefaultPaymentMethod - setDefaultPaymentMethod"))
}

// ID is the resolver for the id field.
func (r *paymentResolver) ID(ctx context.Context, obj *models.Payment) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// OrderID is the resolver for the orderId field.
func (r *paymentResolver) OrderID(ctx context.Context, obj *models.Payment) (*string, error) {
	panic(fmt.Errorf("not implemented: OrderID - orderId"))
}

// CustomerID is the resolver for the customerId field.
func (r *paymentResolver) CustomerID(ctx context.Context, obj *models.Payment) (*string, error) {
	panic(fmt.Errorf("not implemented: CustomerID - customerId"))
}

// MerchantID is the resolver for the merchantId field.
func (r *paymentResolver) MerchantID(ctx context.Context, obj *models.Payment) (string, error) {
	panic(fmt.Errorf("not implemented: MerchantID - merchantId"))
}

// Gateway is the resolver for the gateway field.
func (r *paymentResolver) Gateway(ctx context.Context, obj *models.Payment) (string, error) {
	panic(fmt.Errorf("not implemented: Gateway - gateway"))
}

// GatewayTransactionID is the resolver for the gatewayTransactionId field.
func (r *paymentResolver) GatewayTransactionID(ctx context.Context, obj *models.Payment) (*string, error) {
	panic(fmt.Errorf("not implemented: GatewayTransactionID - gatewayTransactionId"))
}

// PaymentMethodID is the resolver for the paymentMethodId field.
func (r *paymentResolver) PaymentMethodID(ctx context.Context, obj *models.Payment) (*string, error) {
	panic(fmt.Errorf("not implemented: PaymentMethodID - paymentMethodId"))
}

// PaymentMethodType is the resolver for the paymentMethodType field.
func (r *paymentResolver) PaymentMethodType(ctx context.Context, obj *models.Payment) (models.PaymentMethodType, error) {
	panic(fmt.Errorf("not implemented: PaymentMethodType - paymentMethodType"))
}

// BillingAddress is the resolver for the billingAddress field.
func (r *paymentResolver) BillingAddress(ctx context.Context, obj *models.Payment) (*models.Address, error) {
	panic(fmt.Errorf("not implemented: BillingAddress - billingAddress"))
}

// ProcessorResponse is the resolver for the processorResponse field.
func (r *paymentResolver) ProcessorResponse(ctx context.Context, obj *models.Payment) (*string, error) {
	panic(fmt.Errorf("not implemented: ProcessorResponse - processorResponse"))
}

// FailureReason is the resolver for the failureReason field.
func (r *paymentResolver) FailureReason(ctx context.Context, obj *models.Payment) (*string, error) {
	panic(fmt.Errorf("not implemented: FailureReason - failureReason"))
}

// Metadata is the resolver for the metadata field.
func (r *paymentResolver) Metadata(ctx context.Context, obj *models.Payment) (*string, error) {
	panic(fmt.Errorf("not implemented: Metadata - metadata"))
}

// AuthorizedAt is the resolver for the authorizedAt field.
func (r *paymentResolver) AuthorizedAt(ctx context.Context, obj *models.Payment) (*string, error) {
	panic(fmt.Errorf("not implemented: AuthorizedAt - authorizedAt"))
}

// CapturedAt is the resolver for the capturedAt field.
func (r *paymentResolver) CapturedAt(ctx context.Context, obj *models.Payment) (*string, error) {
	panic(fmt.Errorf("not implemented: CapturedAt - capturedAt"))
}

// FailedAt is the resolver for the failedAt field.
func (r *paymentResolver) FailedAt(ctx context.Context, obj *models.Payment) (*string, error) {
	panic(fmt.Errorf("not implemented: FailedAt - failedAt"))
}

// RefundedAt is the resolver for the refundedAt field.
func (r *paymentResolver) RefundedAt(ctx context.Context, obj *models.Payment) (*string, error) {
	panic(fmt.Errorf("not implemented: RefundedAt - refundedAt"))
}

// VoidedAt is the resolver for the voidedAt field.
func (r *paymentResolver) VoidedAt(ctx context.Context, obj *models.Payment) (*string, error) {
	panic(fmt.Errorf("not implemented: VoidedAt - voidedAt"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *paymentResolver) CreatedAt(ctx context.Context, obj *models.Payment) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *paymentResolver) UpdatedAt(ctx context.Context, obj *models.Payment) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// Order is the resolver for the order field.
func (r *paymentResolver) Order(ctx context.Context, obj *models.Payment) (*models.Order, error) {
	panic(fmt.Errorf("not implemented: Order - order"))
}

// Customer is the resolver for the customer field.
func (r *paymentResolver) Customer(ctx context.Context, obj *models.Payment) (*models.User, error) {
	panic(fmt.Errorf("not implemented: Customer - customer"))
}

// ID is the resolver for the id field.
func (r *paymentMethodResolver) ID(ctx context.Context, obj *models.PaymentMethod) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// CustomerID is the resolver for the customerId field.
func (r *paymentMethodResolver) CustomerID(ctx context.Context, obj *models.PaymentMethod) (string, error) {
	panic(fmt.Errorf("not implemented: CustomerID - customerId"))
}

// MerchantID is the resolver for the merchantId field.
func (r *paymentMethodResolver) MerchantID(ctx context.Context, obj *models.PaymentMethod) (string, error) {
	panic(fmt.Errorf("not implemented: MerchantID - merchantId"))
}

// CardLast4 is the resolver for the cardLast4 field.
func (r *paymentMethodResolver) CardLast4(ctx context.Context, obj *models.PaymentMethod) (*string, error) {
	panic(fmt.Errorf("not implemented: CardLast4 - cardLast4"))
}

// CardBrand is the resolver for the cardBrand field.
func (r *paymentMethodResolver) CardBrand(ctx context.Context, obj *models.PaymentMethod) (*string, error) {
	panic(fmt.Errorf("not implemented: CardBrand - cardBrand"))
}

// CardExpMonth is the resolver for the cardExpMonth field.
func (r *paymentMethodResolver) CardExpMonth(ctx context.Context, obj *models.PaymentMethod) (*int, error) {
	panic(fmt.Errorf("not implemented: CardExpMonth - cardExpMonth"))
}

// CardExpYear is the resolver for the cardExpYear field.
func (r *paymentMethodResolver) CardExpYear(ctx context.Context, obj *models.PaymentMethod) (*int, error) {
	panic(fmt.Errorf("not implemented: CardExpYear - cardExpYear"))
}

// CardFingerprint is the resolver for the cardFingerprint field.
func (r *paymentMethodResolver) CardFingerprint(ctx context.Context, obj *models.PaymentMethod) (*string, error) {
	panic(fmt.Errorf("not implemented: CardFingerprint - cardFingerprint"))
}

// BankLast4 is the resolver for the bankLast4 field.
func (r *paymentMethodResolver) BankLast4(ctx context.Context, obj *models.PaymentMethod) (*string, error) {
	panic(fmt.Errorf("not implemented: BankLast4 - bankLast4"))
}

// BankName is the resolver for the bankName field.
func (r *paymentMethodResolver) BankName(ctx context.Context, obj *models.PaymentMethod) (*string, error) {
	panic(fmt.Errorf("not implemented: BankName - bankName"))
}

// BankAccountType is the resolver for the bankAccountType field.
func (r *paymentMethodResolver) BankAccountType(ctx context.Context, obj *models.PaymentMethod) (*string, error) {
	panic(fmt.Errorf("not implemented: BankAccountType - bankAccountType"))
}

// WalletType is the resolver for the walletType field.
func (r *paymentMethodResolver) WalletType(ctx context.Context, obj *models.PaymentMethod) (*string, error) {
	panic(fmt.Errorf("not implemented: WalletType - walletType"))
}

// WalletEmail is the resolver for the walletEmail field.
func (r *paymentMethodResolver) WalletEmail(ctx context.Context, obj *models.PaymentMethod) (*string, error) {
	panic(fmt.Errorf("not implemented: WalletEmail - walletEmail"))
}

// BillingAddress is the resolver for the billingAddress field.
func (r *paymentMethodResolver) BillingAddress(ctx context.Context, obj *models.PaymentMethod) (*models.Address, error) {
	panic(fmt.Errorf("not implemented: BillingAddress - billingAddress"))
}

// Metadata is the resolver for the metadata field.
func (r *paymentMethodResolver) Metadata(ctx context.Context, obj *models.PaymentMethod) (*string, error) {
	panic(fmt.Errorf("not implemented: Metadata - metadata"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *paymentMethodResolver) CreatedAt(ctx context.Context, obj *models.PaymentMethod) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *paymentMethodResolver) UpdatedAt(ctx context.Context, obj *models.PaymentMethod) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// Customer is the resolver for the customer field.
func (r *paymentMethodResolver) Customer(ctx context.Context, obj *models.PaymentMethod) (*models.User, error) {
	panic(fmt.Errorf("not implemented: Customer - customer"))
}

// Payment implements QueryResolver
func (r *queryResolver) Payment(ctx context.Context, id string) (*models.Payment, error) {
	r.Logger.WithField("id", id).Info("Getting payment")
	// TODO: Implement payment lookup
	return nil, nil
}

// Payments implements QueryResolver
func (r *queryResolver) Payments(ctx context.Context, filter *models.PaymentFilter) ([]*models.Payment, error) {
	r.Logger.WithField("filter", filter).Info("Getting payments")
	// TODO: Implement payment search
	return []*models.Payment{}, nil
}

// PaymentMethod is the resolver for the paymentMethod field.
func (r *queryResolver) PaymentMethod(ctx context.Context, id string) (*models.PaymentMethod, error) {
	panic(fmt.Errorf("not implemented: PaymentMethod - paymentMethod"))
}

// PaymentMethods is the resolver for the paymentMethods field.
func (r *queryResolver) PaymentMethods(ctx context.Context, customerID *string) ([]*models.PaymentMethod, error) {
	panic(fmt.Errorf("not implemented: PaymentMethods - paymentMethods"))
}

// ID is the resolver for the id field.
func (r *refundResolver) ID(ctx context.Context, obj *models.Refund) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// PaymentID is the resolver for the paymentId field.
func (r *refundResolver) PaymentID(ctx context.Context, obj *models.Refund) (string, error) {
	panic(fmt.Errorf("not implemented: PaymentID - paymentId"))
}

// OrderID is the resolver for the orderId field.
func (r *refundResolver) OrderID(ctx context.Context, obj *models.Refund) (*string, error) {
	panic(fmt.Errorf("not implemented: OrderID - orderId"))
}

// Reason is the resolver for the reason field.
func (r *refundResolver) Reason(ctx context.Context, obj *models.Refund) (*string, error) {
	panic(fmt.Errorf("not implemented: Reason - reason"))
}

// GatewayRefundID is the resolver for the gatewayRefundId field.
func (r *refundResolver) GatewayRefundID(ctx context.Context, obj *models.Refund) (*string, error) {
	panic(fmt.Errorf("not implemented: GatewayRefundID - gatewayRefundId"))
}

// ProcessorResponse is the resolver for the processorResponse field.
func (r *refundResolver) ProcessorResponse(ctx context.Context, obj *models.Refund) (*string, error) {
	panic(fmt.Errorf("not implemented: ProcessorResponse - processorResponse"))
}

// FailureReason is the resolver for the failureReason field.
func (r *refundResolver) FailureReason(ctx context.Context, obj *models.Refund) (*string, error) {
	panic(fmt.Errorf("not implemented: FailureReason - failureReason"))
}

// Metadata is the resolver for the metadata field.
func (r *refundResolver) Metadata(ctx context.Context, obj *models.Refund) (*string, error) {
	panic(fmt.Errorf("not implemented: Metadata - metadata"))
}

// ProcessedAt is the resolver for the processedAt field.
func (r *refundResolver) ProcessedAt(ctx context.Context, obj *models.Refund) (*string, error) {
	panic(fmt.Errorf("not implemented: ProcessedAt - processedAt"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *refundResolver) CreatedAt(ctx context.Context, obj *models.Refund) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *refundResolver) UpdatedAt(ctx context.Context, obj *models.Refund) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// ID is the resolver for the id field.
func (r *transactionResolver) ID(ctx context.Context, obj *models.Transaction) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// PaymentID is the resolver for the paymentId field.
func (r *transactionResolver) PaymentID(ctx context.Context, obj *models.Transaction) (string, error) {
	panic(fmt.Errorf("not implemented: PaymentID - paymentId"))
}

// OrderID is the resolver for the orderId field.
func (r *transactionResolver) OrderID(ctx context.Context, obj *models.Transaction) (*string, error) {
	panic(fmt.Errorf("not implemented: OrderID - orderId"))
}

// Metadata is the resolver for the metadata field.
func (r *transactionResolver) Metadata(ctx context.Context, obj *models.Transaction) (*string, error) {
	panic(fmt.Errorf("not implemented: Metadata - metadata"))
}

// ProcessedAt is the resolver for the processedAt field.
func (r *transactionResolver) ProcessedAt(ctx context.Context, obj *models.Transaction) (*string, error) {
	panic(fmt.Errorf("not implemented: ProcessedAt - processedAt"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *transactionResolver) CreatedAt(ctx context.Context, obj *models.Transaction) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *transactionResolver) UpdatedAt(ctx context.Context, obj *models.Transaction) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// Address returns AddressResolver implementation.
func (r *Resolver) Address() AddressResolver { return &addressResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Payment returns PaymentResolver implementation.
func (r *Resolver) Payment() PaymentResolver { return &paymentResolver{r} }

// PaymentMethod returns PaymentMethodResolver implementation.
func (r *Resolver) PaymentMethod() PaymentMethodResolver { return &paymentMethodResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Refund returns RefundResolver implementation.
func (r *Resolver) Refund() RefundResolver { return &refundResolver{r} }

// Transaction returns TransactionResolver implementation.
func (r *Resolver) Transaction() TransactionResolver { return &transactionResolver{r} }

type addressResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type paymentResolver struct{ *Resolver }
type paymentMethodResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type refundResolver struct{ *Resolver }
type transactionResolver struct{ *Resolver }
