// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"fmt"
	"io"
	"strconv"
)

type AddressInput struct {
	FirstName  *string  `json:"firstName,omitempty"`
	LastName   *string  `json:"lastName,omitempty"`
	Company    *string  `json:"company,omitempty"`
	Street1    *string  `json:"street1,omitempty"`
	Street2    *string  `json:"street2,omitempty"`
	City       *string  `json:"city,omitempty"`
	State      *string  `json:"state,omitempty"`
	Country    *string  `json:"country,omitempty"`
	PostalCode *string  `json:"postalCode,omitempty"`
	Phone      *string  `json:"phone,omitempty"`
	Latitude   *float64 `json:"latitude,omitempty"`
	Longitude  *float64 `json:"longitude,omitempty"`
}

type AdjustStockInput struct {
	InventoryItemID string  `json:"inventoryItemId"`
	Quantity        int     `json:"quantity"`
	Reason          string  `json:"reason"`
	Note            *string `json:"note,omitempty"`
	UserID          *string `json:"userId,omitempty"`
	Metadata        *string `json:"metadata,omitempty"`
}

type CreateInventoryItemInput struct {
	ProductID        string   `json:"productId"`
	ProductVariantID *string  `json:"productVariantId,omitempty"`
	LocationID       string   `json:"locationId"`
	MerchantID       string   `json:"merchantId"`
	Sku              string   `json:"sku"`
	Barcode          *string  `json:"barcode,omitempty"`
	ProductTitle     *string  `json:"productTitle,omitempty"`
	VariantTitle     *string  `json:"variantTitle,omitempty"`
	QuantityOnHand   int      `json:"quantityOnHand"`
	TrackQuantity    *bool    `json:"trackQuantity,omitempty"`
	AllowBackorders  *bool    `json:"allowBackorders,omitempty"`
	RequiresShipping *bool    `json:"requiresShipping,omitempty"`
	CostPrice        *float64 `json:"costPrice,omitempty"`
	Metadata         *string  `json:"metadata,omitempty"`
}

type CreateLocationInput struct {
	MerchantID      string        `json:"merchantId"`
	Name            string        `json:"name"`
	Code            string        `json:"code"`
	Type            LocationType  `json:"type"`
	Address         *AddressInput `json:"address,omitempty"`
	Phone           *string       `json:"phone,omitempty"`
	Email           *string       `json:"email,omitempty"`
	IsActive        *bool         `json:"isActive,omitempty"`
	IsDefault       *bool         `json:"isDefault,omitempty"`
	AllowBackorders *bool         `json:"allowBackorders,omitempty"`
	Metadata        *string       `json:"metadata,omitempty"`
}

type InventoryFilter struct {
	ProductID        *string `json:"productId,omitempty"`
	ProductVariantID *string `json:"productVariantId,omitempty"`
	LocationID       *string `json:"locationId,omitempty"`
	MerchantID       *string `json:"merchantId,omitempty"`
	Sku              *string `json:"sku,omitempty"`
	TrackQuantity    *bool   `json:"trackQuantity,omitempty"`
	Limit            *int    `json:"limit,omitempty"`
	Offset           *int    `json:"offset,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type ReleaseStockInput struct {
	InventoryItemID string  `json:"inventoryItemId"`
	Quantity        int     `json:"quantity"`
	OrderID         *string `json:"orderId,omitempty"`
	Reason          *string `json:"reason,omitempty"`
	UserID          *string `json:"userId,omitempty"`
}

type ReserveStockInput struct {
	InventoryItemID string  `json:"inventoryItemId"`
	Quantity        int     `json:"quantity"`
	OrderID         *string `json:"orderId,omitempty"`
	Reason          *string `json:"reason,omitempty"`
	UserID          *string `json:"userId,omitempty"`
}

type StockMovementFilter struct {
	InventoryItemID *string            `json:"inventoryItemId,omitempty"`
	LocationID      *string            `json:"locationId,omitempty"`
	ProductID       *string            `json:"productId,omitempty"`
	Type            *StockMovementType `json:"type,omitempty"`
	ReferenceType   *string            `json:"referenceType,omitempty"`
	ReferenceID     *string            `json:"referenceId,omitempty"`
	OrderID         *string            `json:"orderId,omitempty"`
	UserID          *string            `json:"userId,omitempty"`
	DateFrom        *string            `json:"dateFrom,omitempty"`
	DateTo          *string            `json:"dateTo,omitempty"`
	Limit           *int               `json:"limit,omitempty"`
	Offset          *int               `json:"offset,omitempty"`
}

type TransferStockInput struct {
	FromLocationID   string  `json:"fromLocationId"`
	ToLocationID     string  `json:"toLocationId"`
	ProductID        string  `json:"productId"`
	ProductVariantID *string `json:"productVariantId,omitempty"`
	Quantity         int     `json:"quantity"`
	Reason           *string `json:"reason,omitempty"`
	Note             *string `json:"note,omitempty"`
	UserID           *string `json:"userId,omitempty"`
	Metadata         *string `json:"metadata,omitempty"`
}

type UpdateInventoryItemInput struct {
	Sku              *string  `json:"sku,omitempty"`
	Barcode          *string  `json:"barcode,omitempty"`
	ProductTitle     *string  `json:"productTitle,omitempty"`
	VariantTitle     *string  `json:"variantTitle,omitempty"`
	TrackQuantity    *bool    `json:"trackQuantity,omitempty"`
	AllowBackorders  *bool    `json:"allowBackorders,omitempty"`
	RequiresShipping *bool    `json:"requiresShipping,omitempty"`
	CostPrice        *float64 `json:"costPrice,omitempty"`
	Metadata         *string  `json:"metadata,omitempty"`
}

type UpdateLocationInput struct {
	Name            *string       `json:"name,omitempty"`
	Code            *string       `json:"code,omitempty"`
	Type            *LocationType `json:"type,omitempty"`
	Address         *AddressInput `json:"address,omitempty"`
	Phone           *string       `json:"phone,omitempty"`
	Email           *string       `json:"email,omitempty"`
	IsActive        *bool         `json:"isActive,omitempty"`
	IsDefault       *bool         `json:"isDefault,omitempty"`
	AllowBackorders *bool         `json:"allowBackorders,omitempty"`
	Metadata        *string       `json:"metadata,omitempty"`
}

type LocationType string

const (
	LocationTypeWarehouse         LocationType = "WAREHOUSE"
	LocationTypeStore             LocationType = "STORE"
	LocationTypeFulfillmentCenter LocationType = "FULFILLMENT_CENTER"
	LocationTypeDropship          LocationType = "DROPSHIP"
	LocationTypeVirtual           LocationType = "VIRTUAL"
)

var AllLocationType = []LocationType{
	LocationTypeWarehouse,
	LocationTypeStore,
	LocationTypeFulfillmentCenter,
	LocationTypeDropship,
	LocationTypeVirtual,
}

func (e LocationType) IsValid() bool {
	switch e {
	case LocationTypeWarehouse, LocationTypeStore, LocationTypeFulfillmentCenter, LocationTypeDropship, LocationTypeVirtual:
		return true
	}
	return false
}

func (e LocationType) String() string {
	return string(e)
}

func (e *LocationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocationType", str)
	}
	return nil
}

func (e LocationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StockMovementType string

const (
	StockMovementTypeAdjustment  StockMovementType = "ADJUSTMENT"
	StockMovementTypeSale        StockMovementType = "SALE"
	StockMovementTypeReturn      StockMovementType = "RETURN"
	StockMovementTypeTransfer    StockMovementType = "TRANSFER"
	StockMovementTypeReservation StockMovementType = "RESERVATION"
	StockMovementTypeRelease     StockMovementType = "RELEASE"
	StockMovementTypePurchase    StockMovementType = "PURCHASE"
	StockMovementTypeDamage      StockMovementType = "DAMAGE"
	StockMovementTypeTheft       StockMovementType = "THEFT"
	StockMovementTypeCorrection  StockMovementType = "CORRECTION"
)

var AllStockMovementType = []StockMovementType{
	StockMovementTypeAdjustment,
	StockMovementTypeSale,
	StockMovementTypeReturn,
	StockMovementTypeTransfer,
	StockMovementTypeReservation,
	StockMovementTypeRelease,
	StockMovementTypePurchase,
	StockMovementTypeDamage,
	StockMovementTypeTheft,
	StockMovementTypeCorrection,
}

func (e StockMovementType) IsValid() bool {
	switch e {
	case StockMovementTypeAdjustment, StockMovementTypeSale, StockMovementTypeReturn, StockMovementTypeTransfer, StockMovementTypeReservation, StockMovementTypeRelease, StockMovementTypePurchase, StockMovementTypeDamage, StockMovementTypeTheft, StockMovementTypeCorrection:
		return true
	}
	return false
}

func (e StockMovementType) String() string {
	return string(e)
}

func (e *StockMovementType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StockMovementType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StockMovementType", str)
	}
	return nil
}

func (e StockMovementType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
