package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"unified-commerce/services/order/models"

	"github.com/google/uuid"
)

// FindAddressByFirstNameAndLastNameAndStreet1AndStreet2AndCityAndStateAndCountryAndPostalCode is the resolver for the findAddressByFirstNameAndLastNameAndStreet1AndStreet2AndCityAndStateAndCountryAndPostalCode field.
func (r *entityResolver) FindAddressByFirstNameAndLastNameAndStreet1AndStreet2AndCityAndStateAndCountryAndPostalCode(ctx context.Context, firstName *string, lastName *string, street1 *string, street2 *string, city *string, state *string, country *string, postalCode *string) (*models.Address, error) {
	// Return a minimal address object for federation purposes
	return &models.Address{
		FirstName:  *firstName,
		LastName:   *lastName,
		Street1:    *street1,
		Street2:    *street2,
		City:       *city,
		State:      *state,
		Country:    *country,
		PostalCode: *postalCode,
	}, nil
}

// FindOrderByID is the resolver for the findOrderByID field.
func (r *entityResolver) FindOrderByID(ctx context.Context, id string) (*models.Order, error) {
	// Parse the ID as UUID
	parsedID, _ := uuid.Parse(id)

	// Return a minimal order object for federation purposes
	return &models.Order{
		ID: parsedID,
	}, nil
}

// FindTransactionByID is the resolver for the findTransactionByID field.
func (r *entityResolver) FindTransactionByID(ctx context.Context, id string) (*models.Transaction, error) {
	// Parse the ID as UUID
	parsedID, _ := uuid.Parse(id)

	// Return a minimal transaction object for federation purposes
	return &models.Transaction{
		ID: parsedID,
	}, nil
}

// Entity returns EntityResolver implementation.
func (r *Resolver) Entity() EntityResolver { return &entityResolver{r} }

type entityResolver struct{ *Resolver }
