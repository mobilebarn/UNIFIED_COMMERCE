package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"unified-commerce/services/product-catalog/models"
)

// ID is the resolver for the id field.
func (r *brandResolver) ID(ctx context.Context, obj *models.Brand) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Handle is the resolver for the handle field.
func (r *brandResolver) Handle(ctx context.Context, obj *models.Brand) (string, error) {
	panic(fmt.Errorf("not implemented: Handle - handle"))
}

// Logo is the resolver for the logo field.
func (r *brandResolver) Logo(ctx context.Context, obj *models.Brand) (*string, error) {
	panic(fmt.Errorf("not implemented: Logo - logo"))
}

// SeoTitle is the resolver for the seoTitle field.
func (r *brandResolver) SeoTitle(ctx context.Context, obj *models.Brand) (*string, error) {
	panic(fmt.Errorf("not implemented: SeoTitle - seoTitle"))
}

// SeoDescription is the resolver for the seoDescription field.
func (r *brandResolver) SeoDescription(ctx context.Context, obj *models.Brand) (*string, error) {
	panic(fmt.Errorf("not implemented: SeoDescription - seoDescription"))
}

// Metafields is the resolver for the metafields field.
func (r *brandResolver) Metafields(ctx context.Context, obj *models.Brand) (*string, error) {
	panic(fmt.Errorf("not implemented: Metafields - metafields"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *brandResolver) CreatedAt(ctx context.Context, obj *models.Brand) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *brandResolver) UpdatedAt(ctx context.Context, obj *models.Brand) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// Products is the resolver for the products field.
func (r *brandResolver) Products(ctx context.Context, obj *models.Brand) ([]*models.Product, error) {
	panic(fmt.Errorf("not implemented: Products - products"))
}

// ID is the resolver for the id field.
func (r *categoryResolver) ID(ctx context.Context, obj *models.Category) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Handle is the resolver for the handle field.
func (r *categoryResolver) Handle(ctx context.Context, obj *models.Category) (string, error) {
	panic(fmt.Errorf("not implemented: Handle - handle"))
}

// SeoTitle is the resolver for the seoTitle field.
func (r *categoryResolver) SeoTitle(ctx context.Context, obj *models.Category) (*string, error) {
	panic(fmt.Errorf("not implemented: SeoTitle - seoTitle"))
}

// SeoDescription is the resolver for the seoDescription field.
func (r *categoryResolver) SeoDescription(ctx context.Context, obj *models.Category) (*string, error) {
	panic(fmt.Errorf("not implemented: SeoDescription - seoDescription"))
}

// IsVisible is the resolver for the isVisible field.
func (r *categoryResolver) IsVisible(ctx context.Context, obj *models.Category) (bool, error) {
	panic(fmt.Errorf("not implemented: IsVisible - isVisible"))
}

// Image is the resolver for the image field.
func (r *categoryResolver) Image(ctx context.Context, obj *models.Category) (*string, error) {
	panic(fmt.Errorf("not implemented: Image - image"))
}

// Metafields is the resolver for the metafields field.
func (r *categoryResolver) Metafields(ctx context.Context, obj *models.Category) (*string, error) {
	panic(fmt.Errorf("not implemented: Metafields - metafields"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *categoryResolver) CreatedAt(ctx context.Context, obj *models.Category) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *categoryResolver) UpdatedAt(ctx context.Context, obj *models.Category) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// Parent is the resolver for the parent field.
func (r *categoryResolver) Parent(ctx context.Context, obj *models.Category) (*models.Category, error) {
	panic(fmt.Errorf("not implemented: Parent - parent"))
}

// Children is the resolver for the children field.
func (r *categoryResolver) Children(ctx context.Context, obj *models.Category) ([]*models.Category, error) {
	panic(fmt.Errorf("not implemented: Children - children"))
}

// Products is the resolver for the products field.
func (r *categoryResolver) Products(ctx context.Context, obj *models.Category) ([]*models.Product, error) {
	panic(fmt.Errorf("not implemented: Products - products"))
}

// ID is the resolver for the id field.
func (r *collectionResolver) ID(ctx context.Context, obj *models.Collection) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Title is the resolver for the title field.
func (r *collectionResolver) Title(ctx context.Context, obj *models.Collection) (string, error) {
	panic(fmt.Errorf("not implemented: Title - title"))
}

// Handle is the resolver for the handle field.
func (r *collectionResolver) Handle(ctx context.Context, obj *models.Collection) (string, error) {
	panic(fmt.Errorf("not implemented: Handle - handle"))
}

// SeoTitle is the resolver for the seoTitle field.
func (r *collectionResolver) SeoTitle(ctx context.Context, obj *models.Collection) (*string, error) {
	panic(fmt.Errorf("not implemented: SeoTitle - seoTitle"))
}

// SeoDescription is the resolver for the seoDescription field.
func (r *collectionResolver) SeoDescription(ctx context.Context, obj *models.Collection) (*string, error) {
	panic(fmt.Errorf("not implemented: SeoDescription - seoDescription"))
}

// SortOrder is the resolver for the sortOrder field.
func (r *collectionResolver) SortOrder(ctx context.Context, obj *models.Collection) (CollectionSortOrder, error) {
	panic(fmt.Errorf("not implemented: SortOrder - sortOrder"))
}

// IsVisible is the resolver for the isVisible field.
func (r *collectionResolver) IsVisible(ctx context.Context, obj *models.Collection) (bool, error) {
	panic(fmt.Errorf("not implemented: IsVisible - isVisible"))
}

// Image is the resolver for the image field.
func (r *collectionResolver) Image(ctx context.Context, obj *models.Collection) (*string, error) {
	panic(fmt.Errorf("not implemented: Image - image"))
}

// RulesMatch is the resolver for the rulesMatch field.
func (r *collectionResolver) RulesMatch(ctx context.Context, obj *models.Collection) (*CollectionRulesMatch, error) {
	panic(fmt.Errorf("not implemented: RulesMatch - rulesMatch"))
}

// Metafields is the resolver for the metafields field.
func (r *collectionResolver) Metafields(ctx context.Context, obj *models.Collection) (*string, error) {
	panic(fmt.Errorf("not implemented: Metafields - metafields"))
}

// PublishedAt is the resolver for the publishedAt field.
func (r *collectionResolver) PublishedAt(ctx context.Context, obj *models.Collection) (*string, error) {
	panic(fmt.Errorf("not implemented: PublishedAt - publishedAt"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *collectionResolver) CreatedAt(ctx context.Context, obj *models.Collection) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *collectionResolver) UpdatedAt(ctx context.Context, obj *models.Collection) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// Products is the resolver for the products field.
func (r *collectionResolver) Products(ctx context.Context, obj *models.Collection) ([]*models.Product, error) {
	panic(fmt.Errorf("not implemented: Products - products"))
}

// ID is the resolver for the id field.
func (r *collectionRuleResolver) ID(ctx context.Context, obj *models.CollectionRule) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// CollectionID is the resolver for the collectionId field.
func (r *collectionRuleResolver) CollectionID(ctx context.Context, obj *models.CollectionRule) (string, error) {
	panic(fmt.Errorf("not implemented: CollectionID - collectionId"))
}

// Column is the resolver for the column field.
func (r *collectionRuleResolver) Column(ctx context.Context, obj *models.CollectionRule) (string, error) {
	panic(fmt.Errorf("not implemented: Column - column"))
}

// Relation is the resolver for the relation field.
func (r *collectionRuleResolver) Relation(ctx context.Context, obj *models.CollectionRule) (string, error) {
	panic(fmt.Errorf("not implemented: Relation - relation"))
}

// Condition is the resolver for the condition field.
func (r *collectionRuleResolver) Condition(ctx context.Context, obj *models.CollectionRule) (string, error) {
	panic(fmt.Errorf("not implemented: Condition - condition"))
}

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input CreateProductInput) (*models.Product, error) {
	panic(fmt.Errorf("not implemented: CreateProduct - createProduct"))
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, id string, input UpdateProductInput) (*models.Product, error) {
	panic(fmt.Errorf("not implemented: UpdateProduct - updateProduct"))
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteProduct - deleteProduct"))
}

// PublishProduct is the resolver for the publishProduct field.
func (r *mutationResolver) PublishProduct(ctx context.Context, id string) (*models.Product, error) {
	panic(fmt.Errorf("not implemented: PublishProduct - publishProduct"))
}

// UnpublishProduct is the resolver for the unpublishProduct field.
func (r *mutationResolver) UnpublishProduct(ctx context.Context, id string) (*models.Product, error) {
	panic(fmt.Errorf("not implemented: UnpublishProduct - unpublishProduct"))
}

// CreateProductVariant is the resolver for the createProductVariant field.
func (r *mutationResolver) CreateProductVariant(ctx context.Context, input CreateProductVariantInput) (*models.ProductVariant, error) {
	panic(fmt.Errorf("not implemented: CreateProductVariant - createProductVariant"))
}

// UpdateProductVariant is the resolver for the updateProductVariant field.
func (r *mutationResolver) UpdateProductVariant(ctx context.Context, id string, input UpdateProductVariantInput) (*models.ProductVariant, error) {
	panic(fmt.Errorf("not implemented: UpdateProductVariant - updateProductVariant"))
}

// DeleteProductVariant is the resolver for the deleteProductVariant field.
func (r *mutationResolver) DeleteProductVariant(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteProductVariant - deleteProductVariant"))
}

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input CreateCategoryInput) (*models.Category, error) {
	panic(fmt.Errorf("not implemented: CreateCategory - createCategory"))
}

// UpdateCategory is the resolver for the updateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, id string, input UpdateCategoryInput) (*models.Category, error) {
	panic(fmt.Errorf("not implemented: UpdateCategory - updateCategory"))
}

// DeleteCategory is the resolver for the deleteCategory field.
func (r *mutationResolver) DeleteCategory(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCategory - deleteCategory"))
}

// CreateCollection is the resolver for the createCollection field.
func (r *mutationResolver) CreateCollection(ctx context.Context, input CreateCollectionInput) (*models.Collection, error) {
	panic(fmt.Errorf("not implemented: CreateCollection - createCollection"))
}

// UpdateCollection is the resolver for the updateCollection field.
func (r *mutationResolver) UpdateCollection(ctx context.Context, id string, input UpdateCollectionInput) (*models.Collection, error) {
	panic(fmt.Errorf("not implemented: UpdateCollection - updateCollection"))
}

// DeleteCollection is the resolver for the deleteCollection field.
func (r *mutationResolver) DeleteCollection(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCollection - deleteCollection"))
}

// AddProductToCollection is the resolver for the addProductToCollection field.
func (r *mutationResolver) AddProductToCollection(ctx context.Context, collectionID string, productID string) (*models.Collection, error) {
	panic(fmt.Errorf("not implemented: AddProductToCollection - addProductToCollection"))
}

// RemoveProductFromCollection is the resolver for the removeProductFromCollection field.
func (r *mutationResolver) RemoveProductFromCollection(ctx context.Context, collectionID string, productID string) (*models.Collection, error) {
	panic(fmt.Errorf("not implemented: RemoveProductFromCollection - removeProductFromCollection"))
}

// CreateBrand is the resolver for the createBrand field.
func (r *mutationResolver) CreateBrand(ctx context.Context, input CreateBrandInput) (*models.Brand, error) {
	panic(fmt.Errorf("not implemented: CreateBrand - createBrand"))
}

// UpdateBrand is the resolver for the updateBrand field.
func (r *mutationResolver) UpdateBrand(ctx context.Context, id string, input UpdateBrandInput) (*models.Brand, error) {
	panic(fmt.Errorf("not implemented: UpdateBrand - updateBrand"))
}

// DeleteBrand is the resolver for the deleteBrand field.
func (r *mutationResolver) DeleteBrand(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteBrand - deleteBrand"))
}

// ID is the resolver for the id field.
func (r *productResolver) ID(ctx context.Context, obj *models.Product) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Title is the resolver for the title field.
func (r *productResolver) Title(ctx context.Context, obj *models.Product) (string, error) {
	panic(fmt.Errorf("not implemented: Title - title"))
}

// Handle is the resolver for the handle field.
func (r *productResolver) Handle(ctx context.Context, obj *models.Product) (string, error) {
	panic(fmt.Errorf("not implemented: Handle - handle"))
}

// Vendor is the resolver for the vendor field.
func (r *productResolver) Vendor(ctx context.Context, obj *models.Product) (*string, error) {
	panic(fmt.Errorf("not implemented: Vendor - vendor"))
}

// ProductType is the resolver for the productType field.
func (r *productResolver) ProductType(ctx context.Context, obj *models.Product) (*string, error) {
	panic(fmt.Errorf("not implemented: ProductType - productType"))
}

// Status is the resolver for the status field.
func (r *productResolver) Status(ctx context.Context, obj *models.Product) (ProductStatus, error) {
	panic(fmt.Errorf("not implemented: Status - status"))
}

// SeoTitle is the resolver for the seoTitle field.
func (r *productResolver) SeoTitle(ctx context.Context, obj *models.Product) (*string, error) {
	panic(fmt.Errorf("not implemented: SeoTitle - seoTitle"))
}

// SeoDescription is the resolver for the seoDescription field.
func (r *productResolver) SeoDescription(ctx context.Context, obj *models.Product) (*string, error) {
	panic(fmt.Errorf("not implemented: SeoDescription - seoDescription"))
}

// PublishedAt is the resolver for the publishedAt field.
func (r *productResolver) PublishedAt(ctx context.Context, obj *models.Product) (*string, error) {
	panic(fmt.Errorf("not implemented: PublishedAt - publishedAt"))
}

// PublishedScope is the resolver for the publishedScope field.
func (r *productResolver) PublishedScope(ctx context.Context, obj *models.Product) (PublishedScope, error) {
	panic(fmt.Errorf("not implemented: PublishedScope - publishedScope"))
}

// FeaturedImage is the resolver for the featuredImage field.
func (r *productResolver) FeaturedImage(ctx context.Context, obj *models.Product) (*string, error) {
	panic(fmt.Errorf("not implemented: FeaturedImage - featuredImage"))
}

// PriceRange is the resolver for the priceRange field.
func (r *productResolver) PriceRange(ctx context.Context, obj *models.Product) (*models.ProductPriceRange, error) {
	panic(fmt.Errorf("not implemented: PriceRange - priceRange"))
}

// CompareAtPriceRange is the resolver for the compareAtPriceRange field.
func (r *productResolver) CompareAtPriceRange(ctx context.Context, obj *models.Product) (*models.ProductPriceRange, error) {
	panic(fmt.Errorf("not implemented: CompareAtPriceRange - compareAtPriceRange"))
}

// TotalInventory is the resolver for the totalInventory field.
func (r *productResolver) TotalInventory(ctx context.Context, obj *models.Product) (int, error) {
	panic(fmt.Errorf("not implemented: TotalInventory - totalInventory"))
}

// HasOnlyDefaultVariant is the resolver for the hasOnlyDefaultVariant field.
func (r *productResolver) HasOnlyDefaultVariant(ctx context.Context, obj *models.Product) (bool, error) {
	panic(fmt.Errorf("not implemented: HasOnlyDefaultVariant - hasOnlyDefaultVariant"))
}

// RequiresSellingPlan is the resolver for the requiresSellingPlan field.
func (r *productResolver) RequiresSellingPlan(ctx context.Context, obj *models.Product) (bool, error) {
	panic(fmt.Errorf("not implemented: RequiresSellingPlan - requiresSellingPlan"))
}

// Metafields is the resolver for the metafields field.
func (r *productResolver) Metafields(ctx context.Context, obj *models.Product) (*string, error) {
	panic(fmt.Errorf("not implemented: Metafields - metafields"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *productResolver) CreatedAt(ctx context.Context, obj *models.Product) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *productResolver) UpdatedAt(ctx context.Context, obj *models.Product) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// Collections is the resolver for the collections field.
func (r *productResolver) Collections(ctx context.Context, obj *models.Product) ([]*models.Collection, error) {
	panic(fmt.Errorf("not implemented: Collections - collections"))
}

// Category is the resolver for the category field.
func (r *productResolver) Category(ctx context.Context, obj *models.Product) (*models.Category, error) {
	panic(fmt.Errorf("not implemented: Category - category"))
}

// Brand is the resolver for the brand field.
func (r *productResolver) Brand(ctx context.Context, obj *models.Product) (*models.Brand, error) {
	panic(fmt.Errorf("not implemented: Brand - brand"))
}

// ProductID is the resolver for the productId field.
func (r *productImageResolver) ProductID(ctx context.Context, obj *models.ProductImage) (*string, error) {
	panic(fmt.Errorf("not implemented: ProductID - productId"))
}

// VariantIds is the resolver for the variantIds field.
func (r *productImageResolver) VariantIds(ctx context.Context, obj *models.ProductImage) ([]string, error) {
	panic(fmt.Errorf("not implemented: VariantIds - variantIds"))
}

// Src is the resolver for the src field.
func (r *productImageResolver) Src(ctx context.Context, obj *models.ProductImage) (string, error) {
	panic(fmt.Errorf("not implemented: Src - src"))
}

// AltText is the resolver for the altText field.
func (r *productImageResolver) AltText(ctx context.Context, obj *models.ProductImage) (*string, error) {
	panic(fmt.Errorf("not implemented: AltText - altText"))
}

// Position is the resolver for the position field.
func (r *productImageResolver) Position(ctx context.Context, obj *models.ProductImage) (int, error) {
	panic(fmt.Errorf("not implemented: Position - position"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *productImageResolver) CreatedAt(ctx context.Context, obj *models.ProductImage) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *productImageResolver) UpdatedAt(ctx context.Context, obj *models.ProductImage) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// ProductID is the resolver for the productId field.
func (r *productOptionResolver) ProductID(ctx context.Context, obj *models.ProductOption) (string, error) {
	panic(fmt.Errorf("not implemented: ProductID - productId"))
}

// ProductID is the resolver for the productId field.
func (r *productVariantResolver) ProductID(ctx context.Context, obj *models.ProductVariant) (string, error) {
	panic(fmt.Errorf("not implemented: ProductID - productId"))
}

// Title is the resolver for the title field.
func (r *productVariantResolver) Title(ctx context.Context, obj *models.ProductVariant) (string, error) {
	panic(fmt.Errorf("not implemented: Title - title"))
}

// InventoryQuantity is the resolver for the inventoryQuantity field.
func (r *productVariantResolver) InventoryQuantity(ctx context.Context, obj *models.ProductVariant) (int, error) {
	panic(fmt.Errorf("not implemented: InventoryQuantity - inventoryQuantity"))
}

// InventoryPolicy is the resolver for the inventoryPolicy field.
func (r *productVariantResolver) InventoryPolicy(ctx context.Context, obj *models.ProductVariant) (InventoryPolicy, error) {
	panic(fmt.Errorf("not implemented: InventoryPolicy - inventoryPolicy"))
}

// FulfillmentService is the resolver for the fulfillmentService field.
func (r *productVariantResolver) FulfillmentService(ctx context.Context, obj *models.ProductVariant) (*string, error) {
	panic(fmt.Errorf("not implemented: FulfillmentService - fulfillmentService"))
}

// InventoryManagement is the resolver for the inventoryManagement field.
func (r *productVariantResolver) InventoryManagement(ctx context.Context, obj *models.ProductVariant) (*string, error) {
	panic(fmt.Errorf("not implemented: InventoryManagement - inventoryManagement"))
}

// WeightUnit is the resolver for the weightUnit field.
func (r *productVariantResolver) WeightUnit(ctx context.Context, obj *models.ProductVariant) (*string, error) {
	panic(fmt.Errorf("not implemented: WeightUnit - weightUnit"))
}

// RequiresShipping is the resolver for the requiresShipping field.
func (r *productVariantResolver) RequiresShipping(ctx context.Context, obj *models.ProductVariant) (bool, error) {
	panic(fmt.Errorf("not implemented: RequiresShipping - requiresShipping"))
}

// Taxable is the resolver for the taxable field.
func (r *productVariantResolver) Taxable(ctx context.Context, obj *models.ProductVariant) (bool, error) {
	panic(fmt.Errorf("not implemented: Taxable - taxable"))
}

// TaxCode is the resolver for the taxCode field.
func (r *productVariantResolver) TaxCode(ctx context.Context, obj *models.ProductVariant) (*string, error) {
	panic(fmt.Errorf("not implemented: TaxCode - taxCode"))
}

// Option1 is the resolver for the option1 field.
func (r *productVariantResolver) Option1(ctx context.Context, obj *models.ProductVariant) (*string, error) {
	panic(fmt.Errorf("not implemented: Option1 - option1"))
}

// Option2 is the resolver for the option2 field.
func (r *productVariantResolver) Option2(ctx context.Context, obj *models.ProductVariant) (*string, error) {
	panic(fmt.Errorf("not implemented: Option2 - option2"))
}

// Option3 is the resolver for the option3 field.
func (r *productVariantResolver) Option3(ctx context.Context, obj *models.ProductVariant) (*string, error) {
	panic(fmt.Errorf("not implemented: Option3 - option3"))
}

// Metafields is the resolver for the metafields field.
func (r *productVariantResolver) Metafields(ctx context.Context, obj *models.ProductVariant) (*string, error) {
	panic(fmt.Errorf("not implemented: Metafields - metafields"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *productVariantResolver) CreatedAt(ctx context.Context, obj *models.ProductVariant) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *productVariantResolver) UpdatedAt(ctx context.Context, obj *models.ProductVariant) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// Product is the resolver for the product field.
func (r *productVariantResolver) Product(ctx context.Context, obj *models.ProductVariant) (*models.Product, error) {
	panic(fmt.Errorf("not implemented: Product - product"))
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*models.Product, error) {
	panic(fmt.Errorf("not implemented: Product - product"))
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context, filter *ProductFilter) ([]*models.Product, error) {
	panic(fmt.Errorf("not implemented: Products - products"))
}

// ProductByHandle is the resolver for the productByHandle field.
func (r *queryResolver) ProductByHandle(ctx context.Context, handle string) (*models.Product, error) {
	panic(fmt.Errorf("not implemented: ProductByHandle - productByHandle"))
}

// ProductsBySku is the resolver for the productsBySku field.
func (r *queryResolver) ProductsBySku(ctx context.Context, skus []string) ([]*models.Product, error) {
	panic(fmt.Errorf("not implemented: ProductsBySku - productsBySku"))
}

// ProductVariant is the resolver for the productVariant field.
func (r *queryResolver) ProductVariant(ctx context.Context, id string) (*models.ProductVariant, error) {
	panic(fmt.Errorf("not implemented: ProductVariant - productVariant"))
}

// ProductVariants is the resolver for the productVariants field.
func (r *queryResolver) ProductVariants(ctx context.Context, productID string) ([]*models.ProductVariant, error) {
	panic(fmt.Errorf("not implemented: ProductVariants - productVariants"))
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, id string) (*models.Category, error) {
	panic(fmt.Errorf("not implemented: Category - category"))
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context, filter *CategoryFilter) ([]*models.Category, error) {
	panic(fmt.Errorf("not implemented: Categories - categories"))
}

// Collection is the resolver for the collection field.
func (r *queryResolver) Collection(ctx context.Context, id string) (*models.Collection, error) {
	panic(fmt.Errorf("not implemented: Collection - collection"))
}

// Collections is the resolver for the collections field.
func (r *queryResolver) Collections(ctx context.Context, filter *CollectionFilter) ([]*models.Collection, error) {
	panic(fmt.Errorf("not implemented: Collections - collections"))
}

// Brand is the resolver for the brand field.
func (r *queryResolver) Brand(ctx context.Context, id string) (*models.Brand, error) {
	panic(fmt.Errorf("not implemented: Brand - brand"))
}

// Brands is the resolver for the brands field.
func (r *queryResolver) Brands(ctx context.Context, merchantID *string) ([]*models.Brand, error) {
	panic(fmt.Errorf("not implemented: Brands - brands"))
}

// Brand returns BrandResolver implementation.
func (r *Resolver) Brand() BrandResolver { return &brandResolver{r} }

// Category returns CategoryResolver implementation.
func (r *Resolver) Category() CategoryResolver { return &categoryResolver{r} }

// Collection returns CollectionResolver implementation.
func (r *Resolver) Collection() CollectionResolver { return &collectionResolver{r} }

// CollectionRule returns CollectionRuleResolver implementation.
func (r *Resolver) CollectionRule() CollectionRuleResolver { return &collectionRuleResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Product returns ProductResolver implementation.
func (r *Resolver) Product() ProductResolver { return &productResolver{r} }

// ProductImage returns ProductImageResolver implementation.
func (r *Resolver) ProductImage() ProductImageResolver { return &productImageResolver{r} }

// ProductOption returns ProductOptionResolver implementation.
func (r *Resolver) ProductOption() ProductOptionResolver { return &productOptionResolver{r} }

// ProductVariant returns ProductVariantResolver implementation.
func (r *Resolver) ProductVariant() ProductVariantResolver { return &productVariantResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type brandResolver struct{ *Resolver }
type categoryResolver struct{ *Resolver }
type collectionResolver struct{ *Resolver }
type collectionRuleResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type productResolver struct{ *Resolver }
type productImageResolver struct{ *Resolver }
type productOptionResolver struct{ *Resolver }
type productVariantResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
