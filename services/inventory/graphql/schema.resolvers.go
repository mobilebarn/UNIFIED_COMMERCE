package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"time"
	"unified-commerce/services/inventory/models"
)

// ID is the resolver for the id field.
func (r *inventoryItemResolver) ID(ctx context.Context, obj *models.InventoryItem) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ProductID is the resolver for the productId field.
func (r *inventoryItemResolver) ProductID(ctx context.Context, obj *models.InventoryItem) (string, error) {
	panic(fmt.Errorf("not implemented: ProductID - productId"))
}

// ProductVariantID is the resolver for the productVariantId field.
func (r *inventoryItemResolver) ProductVariantID(ctx context.Context, obj *models.InventoryItem) (*string, error) {
	panic(fmt.Errorf("not implemented: ProductVariantID - productVariantId"))
}

// LocationID is the resolver for the locationId field.
func (r *inventoryItemResolver) LocationID(ctx context.Context, obj *models.InventoryItem) (string, error) {
	panic(fmt.Errorf("not implemented: LocationID - locationId"))
}

// MerchantID is the resolver for the merchantId field.
func (r *inventoryItemResolver) MerchantID(ctx context.Context, obj *models.InventoryItem) (string, error) {
	panic(fmt.Errorf("not implemented: MerchantID - merchantId"))
}

// QuantityAvailable is the resolver for the quantityAvailable field.
func (r *inventoryItemResolver) QuantityAvailable(ctx context.Context, obj *models.InventoryItem) (int, error) {
	panic(fmt.Errorf("not implemented: QuantityAvailable - quantityAvailable"))
}

// QuantityReserved is the resolver for the quantityReserved field.
func (r *inventoryItemResolver) QuantityReserved(ctx context.Context, obj *models.InventoryItem) (int, error) {
	panic(fmt.Errorf("not implemented: QuantityReserved - quantityReserved"))
}

// QuantityOnHand is the resolver for the quantityOnHand field.
func (r *inventoryItemResolver) QuantityOnHand(ctx context.Context, obj *models.InventoryItem) (int, error) {
	panic(fmt.Errorf("not implemented: QuantityOnHand - quantityOnHand"))
}

// QuantityCommitted is the resolver for the quantityCommitted field.
func (r *inventoryItemResolver) QuantityCommitted(ctx context.Context, obj *models.InventoryItem) (int, error) {
	panic(fmt.Errorf("not implemented: QuantityCommitted - quantityCommitted"))
}

// Barcode is the resolver for the barcode field.
func (r *inventoryItemResolver) Barcode(ctx context.Context, obj *models.InventoryItem) (*string, error) {
	panic(fmt.Errorf("not implemented: Barcode - barcode"))
}

// ProductTitle is the resolver for the productTitle field.
func (r *inventoryItemResolver) ProductTitle(ctx context.Context, obj *models.InventoryItem) (*string, error) {
	panic(fmt.Errorf("not implemented: ProductTitle - productTitle"))
}

// VariantTitle is the resolver for the variantTitle field.
func (r *inventoryItemResolver) VariantTitle(ctx context.Context, obj *models.InventoryItem) (*string, error) {
	panic(fmt.Errorf("not implemented: VariantTitle - variantTitle"))
}

// TrackQuantity is the resolver for the trackQuantity field.
func (r *inventoryItemResolver) TrackQuantity(ctx context.Context, obj *models.InventoryItem) (bool, error) {
	panic(fmt.Errorf("not implemented: TrackQuantity - trackQuantity"))
}

// AllowBackorders is the resolver for the allowBackorders field.
func (r *inventoryItemResolver) AllowBackorders(ctx context.Context, obj *models.InventoryItem) (bool, error) {
	panic(fmt.Errorf("not implemented: AllowBackorders - allowBackorders"))
}

// RequiresShipping is the resolver for the requiresShipping field.
func (r *inventoryItemResolver) RequiresShipping(ctx context.Context, obj *models.InventoryItem) (bool, error) {
	panic(fmt.Errorf("not implemented: RequiresShipping - requiresShipping"))
}

// CostPrice is the resolver for the costPrice field.
func (r *inventoryItemResolver) CostPrice(ctx context.Context, obj *models.InventoryItem) (*float64, error) {
	panic(fmt.Errorf("not implemented: CostPrice - costPrice"))
}

// Metadata is the resolver for the metadata field.
func (r *inventoryItemResolver) Metadata(ctx context.Context, obj *models.InventoryItem) (*string, error) {
	panic(fmt.Errorf("not implemented: Metadata - metadata"))
}

// LastStockUpdate is the resolver for the lastStockUpdate field.
func (r *inventoryItemResolver) LastStockUpdate(ctx context.Context, obj *models.InventoryItem) (*string, error) {
	panic(fmt.Errorf("not implemented: LastStockUpdate - lastStockUpdate"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *inventoryItemResolver) CreatedAt(ctx context.Context, obj *models.InventoryItem) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *inventoryItemResolver) UpdatedAt(ctx context.Context, obj *models.InventoryItem) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// StockMovements is the resolver for the stockMovements field.
func (r *inventoryItemResolver) StockMovements(ctx context.Context, obj *models.InventoryItem) ([]*models.StockMovement, error) {
	panic(fmt.Errorf("not implemented: StockMovements - stockMovements"))
}

// ID is the resolver for the id field.
func (r *locationResolver) ID(ctx context.Context, obj *models.Location) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// MerchantID is the resolver for the merchantId field.
func (r *locationResolver) MerchantID(ctx context.Context, obj *models.Location) (string, error) {
	panic(fmt.Errorf("not implemented: MerchantID - merchantId"))
}

// Type is the resolver for the type field.
func (r *locationResolver) Type(ctx context.Context, obj *models.Location) (LocationType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Phone is the resolver for the phone field.
func (r *locationResolver) Phone(ctx context.Context, obj *models.Location) (*string, error) {
	panic(fmt.Errorf("not implemented: Phone - phone"))
}

// Email is the resolver for the email field.
func (r *locationResolver) Email(ctx context.Context, obj *models.Location) (*string, error) {
	panic(fmt.Errorf("not implemented: Email - email"))
}

// IsDefault is the resolver for the isDefault field.
func (r *locationResolver) IsDefault(ctx context.Context, obj *models.Location) (bool, error) {
	panic(fmt.Errorf("not implemented: IsDefault - isDefault"))
}

// AllowBackorders is the resolver for the allowBackorders field.
func (r *locationResolver) AllowBackorders(ctx context.Context, obj *models.Location) (bool, error) {
	panic(fmt.Errorf("not implemented: AllowBackorders - allowBackorders"))
}

// Metadata is the resolver for the metadata field.
func (r *locationResolver) Metadata(ctx context.Context, obj *models.Location) (*string, error) {
	panic(fmt.Errorf("not implemented: Metadata - metadata"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *locationResolver) CreatedAt(ctx context.Context, obj *models.Location) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *locationResolver) UpdatedAt(ctx context.Context, obj *models.Location) (*string, error) {
	// Convert time.Time to string
	updatedAtStr := obj.UpdatedAt.Format(time.RFC3339)
	return &updatedAtStr, nil
}

// InventoryItems is the resolver for the inventoryItems field.
func (r *locationResolver) InventoryItems(ctx context.Context, obj *models.Location) ([]*models.InventoryItem, error) {
	panic(fmt.Errorf("not implemented: InventoryItems - inventoryItems"))
}

// CreateInventoryItem is the resolver for the createInventoryItem field.
func (r *mutationResolver) CreateInventoryItem(ctx context.Context, input CreateInventoryItemInput) (*models.InventoryItem, error) {
	panic(fmt.Errorf("not implemented: CreateInventoryItem - createInventoryItem"))
}

// UpdateInventoryItem is the resolver for the updateInventoryItem field.
func (r *mutationResolver) UpdateInventoryItem(ctx context.Context, id string, input UpdateInventoryItemInput) (*models.InventoryItem, error) {
	panic(fmt.Errorf("not implemented: UpdateInventoryItem - updateInventoryItem"))
}

// DeleteInventoryItem is the resolver for the deleteInventoryItem field.
func (r *mutationResolver) DeleteInventoryItem(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteInventoryItem - deleteInventoryItem"))
}

// AdjustStock is the resolver for the adjustStock field.
func (r *mutationResolver) AdjustStock(ctx context.Context, input AdjustStockInput) (*models.StockMovement, error) {
	panic(fmt.Errorf("not implemented: AdjustStock - adjustStock"))
}

// ReserveStock is the resolver for the reserveStock field.
func (r *mutationResolver) ReserveStock(ctx context.Context, input ReserveStockInput) (*models.InventoryItem, error) {
	panic(fmt.Errorf("not implemented: ReserveStock - reserveStock"))
}

// ReleaseStock is the resolver for the releaseStock field.
func (r *mutationResolver) ReleaseStock(ctx context.Context, input ReleaseStockInput) (*models.InventoryItem, error) {
	panic(fmt.Errorf("not implemented: ReleaseStock - releaseStock"))
}

// TransferStock is the resolver for the transferStock field.
func (r *mutationResolver) TransferStock(ctx context.Context, input TransferStockInput) ([]*models.StockMovement, error) {
	panic(fmt.Errorf("not implemented: TransferStock - transferStock"))
}

// CreateLocation is the resolver for the createLocation field.
func (r *mutationResolver) CreateLocation(ctx context.Context, input CreateLocationInput) (*models.Location, error) {
	panic(fmt.Errorf("not implemented: CreateLocation - createLocation"))
}

// UpdateLocation is the resolver for the updateLocation field.
func (r *mutationResolver) UpdateLocation(ctx context.Context, id string, input UpdateLocationInput) (*models.Location, error) {
	panic(fmt.Errorf("not implemented: UpdateLocation - updateLocation"))
}

// DeleteLocation is the resolver for the deleteLocation field.
func (r *mutationResolver) DeleteLocation(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteLocation - deleteLocation"))
}

// InventoryItem is the resolver for the inventoryItem field.
func (r *queryResolver) InventoryItem(ctx context.Context, id string) (*models.InventoryItem, error) {
	panic(fmt.Errorf("not implemented: InventoryItem - inventoryItem"))
}

// InventoryItems is the resolver for the inventoryItems field.
func (r *queryResolver) InventoryItems(ctx context.Context, filter *InventoryFilter) ([]*models.InventoryItem, error) {
	panic(fmt.Errorf("not implemented: InventoryItems - inventoryItems"))
}

// InventoryByLocation is the resolver for the inventoryByLocation field.
func (r *queryResolver) InventoryByLocation(ctx context.Context, locationID string) ([]*models.InventoryItem, error) {
	panic(fmt.Errorf("not implemented: InventoryByLocation - inventoryByLocation"))
}

// InventoryByProduct is the resolver for the inventoryByProduct field.
func (r *queryResolver) InventoryByProduct(ctx context.Context, productID string, variantID *string) (*models.InventoryItem, error) {
	panic(fmt.Errorf("not implemented: InventoryByProduct - inventoryByProduct"))
}

// StockMovement is the resolver for the stockMovement field.
func (r *queryResolver) StockMovement(ctx context.Context, id string) (*models.StockMovement, error) {
	panic(fmt.Errorf("not implemented: StockMovement - stockMovement"))
}

// StockMovements is the resolver for the stockMovements field.
func (r *queryResolver) StockMovements(ctx context.Context, filter *StockMovementFilter) ([]*models.StockMovement, error) {
	panic(fmt.Errorf("not implemented: StockMovements - stockMovements"))
}

// Location is the resolver for the location field.
func (r *queryResolver) Location(ctx context.Context, id string) (*models.Location, error) {
	panic(fmt.Errorf("not implemented: Location - location"))
}

// Locations is the resolver for the locations field.
func (r *queryResolver) Locations(ctx context.Context, merchantID *string) ([]*models.Location, error) {
	panic(fmt.Errorf("not implemented: Locations - locations"))
}

// ID is the resolver for the id field.
func (r *stockMovementResolver) ID(ctx context.Context, obj *models.StockMovement) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// InventoryItemID is the resolver for the inventoryItemId field.
func (r *stockMovementResolver) InventoryItemID(ctx context.Context, obj *models.StockMovement) (string, error) {
	panic(fmt.Errorf("not implemented: InventoryItemID - inventoryItemId"))
}

// LocationID is the resolver for the locationId field.
func (r *stockMovementResolver) LocationID(ctx context.Context, obj *models.StockMovement) (string, error) {
	panic(fmt.Errorf("not implemented: LocationID - locationId"))
}

// ProductID is the resolver for the productId field.
func (r *stockMovementResolver) ProductID(ctx context.Context, obj *models.StockMovement) (string, error) {
	panic(fmt.Errorf("not implemented: ProductID - productId"))
}

// ProductVariantID is the resolver for the productVariantId field.
func (r *stockMovementResolver) ProductVariantID(ctx context.Context, obj *models.StockMovement) (*string, error) {
	panic(fmt.Errorf("not implemented: ProductVariantID - productVariantId"))
}

// Type is the resolver for the type field.
func (r *stockMovementResolver) Type(ctx context.Context, obj *models.StockMovement) (StockMovementType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// ReferenceType is the resolver for the referenceType field.
func (r *stockMovementResolver) ReferenceType(ctx context.Context, obj *models.StockMovement) (*string, error) {
	panic(fmt.Errorf("not implemented: ReferenceType - referenceType"))
}

// ReferenceID is the resolver for the referenceId field.
func (r *stockMovementResolver) ReferenceID(ctx context.Context, obj *models.StockMovement) (*string, error) {
	panic(fmt.Errorf("not implemented: ReferenceID - referenceId"))
}

// OrderID is the resolver for the orderId field.
func (r *stockMovementResolver) OrderID(ctx context.Context, obj *models.StockMovement) (*string, error) {
	panic(fmt.Errorf("not implemented: OrderID - orderId"))
}

// Reason is the resolver for the reason field.
func (r *stockMovementResolver) Reason(ctx context.Context, obj *models.StockMovement) (*string, error) {
	panic(fmt.Errorf("not implemented: Reason - reason"))
}

// Note is the resolver for the note field.
func (r *stockMovementResolver) Note(ctx context.Context, obj *models.StockMovement) (*string, error) {
	panic(fmt.Errorf("not implemented: Note - note"))
}

// UserID is the resolver for the userId field.
func (r *stockMovementResolver) UserID(ctx context.Context, obj *models.StockMovement) (*string, error) {
	panic(fmt.Errorf("not implemented: UserID - userId"))
}

// Metadata is the resolver for the metadata field.
func (r *stockMovementResolver) Metadata(ctx context.Context, obj *models.StockMovement) (*string, error) {
	panic(fmt.Errorf("not implemented: Metadata - metadata"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *stockMovementResolver) CreatedAt(ctx context.Context, obj *models.StockMovement) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// User is the resolver for the user field.
func (r *stockMovementResolver) User(ctx context.Context, obj *models.StockMovement) (*models.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *models.User) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// InventoryItem returns InventoryItemResolver implementation.
func (r *Resolver) InventoryItem() InventoryItemResolver { return &inventoryItemResolver{r} }

// Location returns LocationResolver implementation.
func (r *Resolver) Location() LocationResolver { return &locationResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// StockMovement returns StockMovementResolver implementation.
func (r *Resolver) StockMovement() StockMovementResolver { return &stockMovementResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type inventoryItemResolver struct{ *Resolver }
type locationResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type stockMovementResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
