package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"encoding/json"
	"fmt"
	"time"
	"unified-commerce/services/merchant-account/models"
)

// ContactEmail is the resolver for the contactEmail field.
func (r *merchantResolver) ContactEmail(ctx context.Context, obj *models.Merchant) (string, error) {
	return obj.PrimaryEmail, nil
}

// ContactPhone is the resolver for the contactPhone field.
func (r *merchantResolver) ContactPhone(ctx context.Context, obj *models.Merchant) (*string, error) {
	if obj.PrimaryPhone == "" {
		return nil, nil
	}
	return &obj.PrimaryPhone, nil
}

// Website is the resolver for the website field.
func (r *merchantResolver) Website(ctx context.Context, obj *models.Merchant) (*string, error) {
	if obj.WebsiteURL == "" {
		return nil, nil
	}
	return &obj.WebsiteURL, nil
}

// IsActive is the resolver for the isActive field.
func (r *merchantResolver) IsActive(ctx context.Context, obj *models.Merchant) (bool, error) {
	return obj.Status == "active", nil
}

// Settings is the resolver for the settings field.
func (r *merchantResolver) Settings(ctx context.Context, obj *models.Merchant) (*string, error) {
	// Convert settings to JSON string
	settingsBytes, err := json.Marshal(obj.Settings)
	if err != nil {
		return nil, err
	}
	settingsStr := string(settingsBytes)
	return &settingsStr, nil
}

// VerificationStatus is the resolver for the verificationStatus field.
func (r *merchantResolver) VerificationStatus(ctx context.Context, obj *models.Merchant) (string, error) {
	if obj.IsVerified {
		return "verified", nil
	}
	return "pending", nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *merchantResolver) CreatedAt(ctx context.Context, obj *models.Merchant) (string, error) {
	return obj.CreatedAt.Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *merchantResolver) UpdatedAt(ctx context.Context, obj *models.Merchant) (string, error) {
	return obj.UpdatedAt.Format(time.RFC3339), nil
}

// CreateMerchant is the resolver for the createMerchant field.
func (r *mutationResolver) CreateMerchant(ctx context.Context, input CreateMerchantInput) (*models.Merchant, error) {
	panic(fmt.Errorf("not implemented: CreateMerchant - createMerchant"))
}

// UpdateMerchant is the resolver for the updateMerchant field.
func (r *mutationResolver) UpdateMerchant(ctx context.Context, id string, input UpdateMerchantInput) (*models.Merchant, error) {
	panic(fmt.Errorf("not implemented: UpdateMerchant - updateMerchant"))
}

// DeleteMerchant is the resolver for the deleteMerchant field.
func (r *mutationResolver) DeleteMerchant(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteMerchant - deleteMerchant"))
}

// Merchant is the resolver for the merchant field.
func (r *queryResolver) Merchant(ctx context.Context, id string) (*models.Merchant, error) {
	return r.MerchantService.GetMerchantByID(ctx, id)
}

// Merchants is the resolver for the merchants field.
func (r *queryResolver) Merchants(ctx context.Context) ([]*models.Merchant, error) {
	// For now, return empty array - this would typically require authentication
	// to get merchants for the authenticated user
	return []*models.Merchant{}, nil
}

// Merchant returns MerchantResolver implementation.
func (r *Resolver) Merchant() MerchantResolver { return &merchantResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type merchantResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
